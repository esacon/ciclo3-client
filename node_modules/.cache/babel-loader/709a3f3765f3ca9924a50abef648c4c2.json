{"ast":null,"code":"\"use strict\"; // Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar _regeneratorRuntime = require(\"C:/Users/Enrique Niebles/Documents/Misi\\xF3n TIC 2021/Ciclo 3 - Desarrollo Software/Heroku/client/react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:/Users/Enrique Niebles/Documents/Misi\\xF3n TIC 2021/Ciclo 3 - Desarrollo Software/Heroku/client/react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _wrapRegExp = require(\"C:/Users/Enrique Niebles/Documents/Misi\\xF3n TIC 2021/Ciclo 3 - Desarrollo Software/Heroku/client/react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapRegExp\");\n\nvar _classCallCheck = require(\"C:/Users/Enrique Niebles/Documents/Misi\\xF3n TIC 2021/Ciclo 3 - Desarrollo Software/Heroku/client/react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/Enrique Niebles/Documents/Misi\\xF3n TIC 2021/Ciclo 3 - Desarrollo Software/Heroku/client/react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _get = require(\"C:/Users/Enrique Niebles/Documents/Misi\\xF3n TIC 2021/Ciclo 3 - Desarrollo Software/Heroku/client/react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"C:/Users/Enrique Niebles/Documents/Misi\\xF3n TIC 2021/Ciclo 3 - Desarrollo Software/Heroku/client/react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:/Users/Enrique Niebles/Documents/Misi\\xF3n TIC 2021/Ciclo 3 - Desarrollo Software/Heroku/client/react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:/Users/Enrique Niebles/Documents/Misi\\xF3n TIC 2021/Ciclo 3 - Desarrollo Software/Heroku/client/react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BaseExternalAccountClient = exports.CLOUD_RESOURCE_MANAGER = exports.EXTERNAL_ACCOUNT_TYPE = exports.EXPIRATION_TIME_OFFSET = void 0;\n\nvar stream = require(\"stream\");\n\nvar authclient_1 = require(\"./authclient\");\n\nvar sts = require(\"./stscredentials\");\n/**\r\n * The required token exchange grant_type: rfc8693#section-2.1\r\n */\n\n\nvar STS_GRANT_TYPE = 'urn:ietf:params:oauth:grant-type:token-exchange';\n/**\r\n * The requested token exchange requested_token_type: rfc8693#section-2.1\r\n */\n\nvar STS_REQUEST_TOKEN_TYPE = 'urn:ietf:params:oauth:token-type:access_token';\n/** The default OAuth scope to request when none is provided. */\n\nvar DEFAULT_OAUTH_SCOPE = 'https://www.googleapis.com/auth/cloud-platform';\n/** The google apis domain pattern. */\n\nvar GOOGLE_APIS_DOMAIN_PATTERN = '\\\\.googleapis\\\\.com$';\n/** The variable portion pattern in a Google APIs domain. */\n\nvar VARIABLE_PORTION_PATTERN = '[^\\\\.\\\\s\\\\/\\\\\\\\]+';\n/**\r\n * Offset to take into account network delays and server clock skews.\r\n */\n\nexports.EXPIRATION_TIME_OFFSET = 5 * 60 * 1000;\n/**\r\n * The credentials JSON file type for external account clients.\r\n * There are 3 types of JSON configs:\r\n * 1. authorized_user => Google end user credential\r\n * 2. service_account => Google service account credential\r\n * 3. external_Account => non-GCP service (eg. AWS, Azure, K8s)\r\n */\n\nexports.EXTERNAL_ACCOUNT_TYPE = 'external_account';\n/** Cloud resource manager URL used to retrieve project information. */\n\nexports.CLOUD_RESOURCE_MANAGER = 'https://cloudresourcemanager.googleapis.com/v1/projects/';\n/** The workforce audience pattern. */\n\nvar WORKFORCE_AUDIENCE_PATTERN = '//iam.googleapis.com/locations/[^/]+/workforcePools/[^/]+/providers/.+';\n/**\r\n * Base external account client. This is used to instantiate AuthClients for\r\n * exchanging external account credentials for GCP access token and authorizing\r\n * requests to GCP APIs.\r\n * The base class implements common logic for exchanging various type of\r\n * external credentials for GCP access token. The logic of determining and\r\n * retrieving the external credential based on the environment and\r\n * credential_source will be left for the subclasses.\r\n */\n\nvar BaseExternalAccountClient = /*#__PURE__*/function (_authclient_1$AuthCli) {\n  _inherits(BaseExternalAccountClient, _authclient_1$AuthCli);\n\n  var _super = _createSuper(BaseExternalAccountClient);\n\n  /**\r\n   * Instantiate a BaseExternalAccountClient instance using the provided JSON\r\n   * object loaded from an external account credentials file.\r\n   * @param options The external account options object typically loaded\r\n   *   from the external account JSON credential file.\r\n   * @param additionalOptions Optional additional behavior customization\r\n   *   options. These currently customize expiration threshold time and\r\n   *   whether to retry on 401/403 API request errors.\r\n   */\n  function BaseExternalAccountClient(options, additionalOptions) {\n    var _this;\n\n    _classCallCheck(this, BaseExternalAccountClient);\n\n    _this = _super.call(this);\n\n    if (options.type !== exports.EXTERNAL_ACCOUNT_TYPE) {\n      throw new Error(\"Expected \\\"\".concat(exports.EXTERNAL_ACCOUNT_TYPE, \"\\\" type but \") + \"received \\\"\".concat(options.type, \"\\\"\"));\n    }\n\n    _this.clientAuth = options.client_id ? {\n      confidentialClientType: 'basic',\n      clientId: options.client_id,\n      clientSecret: options.client_secret\n    } : undefined;\n\n    if (!_this.validateGoogleAPIsUrl('sts', options.token_url)) {\n      throw new Error(\"\\\"\".concat(options.token_url, \"\\\" is not a valid token url.\"));\n    }\n\n    _this.stsCredential = new sts.StsCredentials(options.token_url, _this.clientAuth); // Default OAuth scope. This could be overridden via public property.\n\n    _this.scopes = [DEFAULT_OAUTH_SCOPE];\n    _this.cachedAccessToken = null;\n    _this.audience = options.audience;\n    _this.subjectTokenType = options.subject_token_type;\n    _this.quotaProjectId = options.quota_project_id;\n    _this.workforcePoolUserProject = options.workforce_pool_user_project;\n    var workforceAudiencePattern = new RegExp(WORKFORCE_AUDIENCE_PATTERN);\n\n    if (_this.workforcePoolUserProject && !_this.audience.match(workforceAudiencePattern)) {\n      throw new Error('workforcePoolUserProject should not be set for non-workforce pool ' + 'credentials.');\n    }\n\n    if (typeof options.service_account_impersonation_url !== 'undefined' && !_this.validateGoogleAPIsUrl('iamcredentials', options.service_account_impersonation_url)) {\n      throw new Error(\"\\\"\".concat(options.service_account_impersonation_url, \"\\\" is \") + 'not a valid service account impersonation url.');\n    }\n\n    _this.serviceAccountImpersonationUrl = options.service_account_impersonation_url; // As threshold could be zero,\n    // eagerRefreshThresholdMillis || EXPIRATION_TIME_OFFSET will override the\n    // zero value.\n\n    if (typeof (additionalOptions === null || additionalOptions === void 0 ? void 0 : additionalOptions.eagerRefreshThresholdMillis) !== 'number') {\n      _this.eagerRefreshThresholdMillis = exports.EXPIRATION_TIME_OFFSET;\n    } else {\n      _this.eagerRefreshThresholdMillis = additionalOptions.eagerRefreshThresholdMillis;\n    }\n\n    _this.forceRefreshOnFailure = !!(additionalOptions === null || additionalOptions === void 0 ? void 0 : additionalOptions.forceRefreshOnFailure);\n    _this.projectId = null;\n    _this.projectNumber = _this.getProjectNumber(_this.audience);\n    return _this;\n  }\n  /** The service account email to be impersonated, if available. */\n\n\n  _createClass(BaseExternalAccountClient, [{\n    key: \"getServiceAccountEmail\",\n    value: function getServiceAccountEmail() {\n      var _a;\n\n      if (this.serviceAccountImpersonationUrl) {\n        // Parse email from URL. The formal looks as follows:\n        // https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/name@project-id.iam.gserviceaccount.com:generateAccessToken\n        var re = /*#__PURE__*/_wrapRegExp(/serviceAccounts\\/((?:(?!:)[\\s\\S])+):generateAccessToken$/, {\n          email: 1\n        });\n\n        var result = re.exec(this.serviceAccountImpersonationUrl);\n        return ((_a = result === null || result === void 0 ? void 0 : result.groups) === null || _a === void 0 ? void 0 : _a.email) || null;\n      }\n\n      return null;\n    }\n    /**\r\n     * Provides a mechanism to inject GCP access tokens directly.\r\n     * When the provided credential expires, a new credential, using the\r\n     * external account options, is retrieved.\r\n     * @param credentials The Credentials object to set on the current client.\r\n     */\n\n  }, {\n    key: \"setCredentials\",\n    value: function setCredentials(credentials) {\n      _get(_getPrototypeOf(BaseExternalAccountClient.prototype), \"setCredentials\", this).call(this, credentials);\n\n      this.cachedAccessToken = credentials;\n    }\n    /**\r\n     * @return A promise that resolves with the current GCP access token\r\n     *   response. If the current credential is expired, a new one is retrieved.\r\n     */\n\n  }, {\n    key: \"getAccessToken\",\n    value: function () {\n      var _getAccessToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(!this.cachedAccessToken || this.isExpired(this.cachedAccessToken))) {\n                  _context.next = 3;\n                  break;\n                }\n\n                _context.next = 3;\n                return this.refreshAccessTokenAsync();\n\n              case 3:\n                return _context.abrupt(\"return\", {\n                  token: this.cachedAccessToken.access_token,\n                  res: this.cachedAccessToken.res\n                });\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getAccessToken() {\n        return _getAccessToken.apply(this, arguments);\n      }\n\n      return getAccessToken;\n    }()\n    /**\r\n     * The main authentication interface. It takes an optional url which when\r\n     * present is the endpoint being accessed, and returns a Promise which\r\n     * resolves with authorization header fields.\r\n     *\r\n     * The result has the form:\r\n     * { Authorization: 'Bearer <access_token_value>' }\r\n     */\n\n  }, {\n    key: \"getRequestHeaders\",\n    value: function () {\n      var _getRequestHeaders = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var accessTokenResponse, headers;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.getAccessToken();\n\n              case 2:\n                accessTokenResponse = _context2.sent;\n                headers = {\n                  Authorization: \"Bearer \".concat(accessTokenResponse.token)\n                };\n                return _context2.abrupt(\"return\", this.addSharedMetadataHeaders(headers));\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getRequestHeaders() {\n        return _getRequestHeaders.apply(this, arguments);\n      }\n\n      return getRequestHeaders;\n    }()\n  }, {\n    key: \"request\",\n    value: function request(opts, callback) {\n      if (callback) {\n        this.requestAsync(opts).then(function (r) {\n          return callback(null, r);\n        }, function (e) {\n          return callback(e, e.response);\n        });\n      } else {\n        return this.requestAsync(opts);\n      }\n    }\n    /**\r\n     * @return A promise that resolves with the project ID corresponding to the\r\n     *   current workload identity pool or current workforce pool if\r\n     *   determinable. For workforce pool credential, it returns the project ID\r\n     *   corresponding to the workforcePoolUserProject.\r\n     *   This is introduced to match the current pattern of using the Auth\r\n     *   library:\r\n     *   const projectId = await auth.getProjectId();\r\n     *   const url = `https://dns.googleapis.com/dns/v1/projects/${projectId}`;\r\n     *   const res = await client.request({ url });\r\n     *   The resource may not have permission\r\n     *   (resourcemanager.projects.get) to call this API or the required\r\n     *   scopes may not be selected:\r\n     *   https://cloud.google.com/resource-manager/reference/rest/v1/projects/get#authorization-scopes\r\n     */\n\n  }, {\n    key: \"getProjectId\",\n    value: function () {\n      var _getProjectId = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var projectNumber, headers, response;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                projectNumber = this.projectNumber || this.workforcePoolUserProject;\n\n                if (!this.projectId) {\n                  _context3.next = 5;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", this.projectId);\n\n              case 5:\n                if (!projectNumber) {\n                  _context3.next = 14;\n                  break;\n                }\n\n                _context3.next = 8;\n                return this.getRequestHeaders();\n\n              case 8:\n                headers = _context3.sent;\n                _context3.next = 11;\n                return this.transporter.request({\n                  headers: headers,\n                  url: \"\".concat(exports.CLOUD_RESOURCE_MANAGER).concat(projectNumber),\n                  responseType: 'json'\n                });\n\n              case 11:\n                response = _context3.sent;\n                this.projectId = response.data.projectId;\n                return _context3.abrupt(\"return\", this.projectId);\n\n              case 14:\n                return _context3.abrupt(\"return\", null);\n\n              case 15:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function getProjectId() {\n        return _getProjectId.apply(this, arguments);\n      }\n\n      return getProjectId;\n    }()\n    /**\r\n     * Authenticates the provided HTTP request, processes it and resolves with the\r\n     * returned response.\r\n     * @param opts The HTTP request options.\r\n     * @param retry Whether the current attempt is a retry after a failed attempt.\r\n     * @return A promise that resolves with the successful response.\r\n     */\n\n  }, {\n    key: \"requestAsync\",\n    value: function () {\n      var _requestAsync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(opts) {\n        var retry,\n            response,\n            requestHeaders,\n            res,\n            statusCode,\n            isReadableStream,\n            isAuthErr,\n            _args4 = arguments;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                retry = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : false;\n                _context4.prev = 1;\n                _context4.next = 4;\n                return this.getRequestHeaders();\n\n              case 4:\n                requestHeaders = _context4.sent;\n                opts.headers = opts.headers || {};\n\n                if (requestHeaders && requestHeaders['x-goog-user-project']) {\n                  opts.headers['x-goog-user-project'] = requestHeaders['x-goog-user-project'];\n                }\n\n                if (requestHeaders && requestHeaders.Authorization) {\n                  opts.headers.Authorization = requestHeaders.Authorization;\n                }\n\n                _context4.next = 10;\n                return this.transporter.request(opts);\n\n              case 10:\n                response = _context4.sent;\n                _context4.next = 27;\n                break;\n\n              case 13:\n                _context4.prev = 13;\n                _context4.t0 = _context4[\"catch\"](1);\n                res = _context4.t0.response;\n\n                if (!res) {\n                  _context4.next = 26;\n                  break;\n                }\n\n                statusCode = res.status; // Retry the request for metadata if the following criteria are true:\n                // - We haven't already retried.  It only makes sense to retry once.\n                // - The response was a 401 or a 403\n                // - The request didn't send a readableStream\n                // - forceRefreshOnFailure is true\n\n                isReadableStream = res.config.data instanceof stream.Readable;\n                isAuthErr = statusCode === 401 || statusCode === 403;\n\n                if (!(!retry && isAuthErr && !isReadableStream && this.forceRefreshOnFailure)) {\n                  _context4.next = 26;\n                  break;\n                }\n\n                _context4.next = 23;\n                return this.refreshAccessTokenAsync();\n\n              case 23:\n                _context4.next = 25;\n                return this.requestAsync(opts, true);\n\n              case 25:\n                return _context4.abrupt(\"return\", _context4.sent);\n\n              case 26:\n                throw _context4.t0;\n\n              case 27:\n                return _context4.abrupt(\"return\", response);\n\n              case 28:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[1, 13]]);\n      }));\n\n      function requestAsync(_x) {\n        return _requestAsync.apply(this, arguments);\n      }\n\n      return requestAsync;\n    }()\n    /**\r\n     * Forces token refresh, even if unexpired tokens are currently cached.\r\n     * External credentials are exchanged for GCP access tokens via the token\r\n     * exchange endpoint and other settings provided in the client options\r\n     * object.\r\n     * If the service_account_impersonation_url is provided, an additional\r\n     * step to exchange the external account GCP access token for a service\r\n     * account impersonated token is performed.\r\n     * @return A promise that resolves with the fresh GCP access tokens.\r\n     */\n\n  }, {\n    key: \"refreshAccessTokenAsync\",\n    value: function () {\n      var _refreshAccessTokenAsync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var subjectToken, stsCredentialsOptions, additionalOptions, stsResponse;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.retrieveSubjectToken();\n\n              case 2:\n                subjectToken = _context5.sent;\n                // Construct the STS credentials options.\n                stsCredentialsOptions = {\n                  grantType: STS_GRANT_TYPE,\n                  audience: this.audience,\n                  requestedTokenType: STS_REQUEST_TOKEN_TYPE,\n                  subjectToken: subjectToken,\n                  subjectTokenType: this.subjectTokenType,\n                  // generateAccessToken requires the provided access token to have\n                  // scopes:\n                  // https://www.googleapis.com/auth/iam or\n                  // https://www.googleapis.com/auth/cloud-platform\n                  // The new service account access token scopes will match the user\n                  // provided ones.\n                  scope: this.serviceAccountImpersonationUrl ? [DEFAULT_OAUTH_SCOPE] : this.getScopesArray()\n                }; // Exchange the external credentials for a GCP access token.\n                // Client auth is prioritized over passing the workforcePoolUserProject\n                // parameter for STS token exchange.\n\n                additionalOptions = !this.clientAuth && this.workforcePoolUserProject ? {\n                  userProject: this.workforcePoolUserProject\n                } : undefined;\n                _context5.next = 7;\n                return this.stsCredential.exchangeToken(stsCredentialsOptions, undefined, additionalOptions);\n\n              case 7:\n                stsResponse = _context5.sent;\n\n                if (!this.serviceAccountImpersonationUrl) {\n                  _context5.next = 14;\n                  break;\n                }\n\n                _context5.next = 11;\n                return this.getImpersonatedAccessToken(stsResponse.access_token);\n\n              case 11:\n                this.cachedAccessToken = _context5.sent;\n                _context5.next = 15;\n                break;\n\n              case 14:\n                if (stsResponse.expires_in) {\n                  // Save response in cached access token.\n                  this.cachedAccessToken = {\n                    access_token: stsResponse.access_token,\n                    expiry_date: new Date().getTime() + stsResponse.expires_in * 1000,\n                    res: stsResponse.res\n                  };\n                } else {\n                  // Save response in cached access token.\n                  this.cachedAccessToken = {\n                    access_token: stsResponse.access_token,\n                    res: stsResponse.res\n                  };\n                }\n\n              case 15:\n                // Save credentials.\n                this.credentials = {};\n                Object.assign(this.credentials, this.cachedAccessToken);\n                delete this.credentials.res; // Trigger tokens event to notify external listeners.\n\n                this.emit('tokens', {\n                  refresh_token: null,\n                  expiry_date: this.cachedAccessToken.expiry_date,\n                  access_token: this.cachedAccessToken.access_token,\n                  token_type: 'Bearer',\n                  id_token: null\n                }); // Return the cached access token.\n\n                return _context5.abrupt(\"return\", this.cachedAccessToken);\n\n              case 20:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function refreshAccessTokenAsync() {\n        return _refreshAccessTokenAsync.apply(this, arguments);\n      }\n\n      return refreshAccessTokenAsync;\n    }()\n    /**\r\n     * Returns the workload identity pool project number if it is determinable\r\n     * from the audience resource name.\r\n     * @param audience The STS audience used to determine the project number.\r\n     * @return The project number associated with the workload identity pool, if\r\n     *   this can be determined from the STS audience field. Otherwise, null is\r\n     *   returned.\r\n     */\n\n  }, {\n    key: \"getProjectNumber\",\n    value: function getProjectNumber(audience) {\n      // STS audience pattern:\n      // //iam.googleapis.com/projects/$PROJECT_NUMBER/locations/...\n      var match = audience.match(/\\/projects\\/([^/]+)/);\n\n      if (!match) {\n        return null;\n      }\n\n      return match[1];\n    }\n    /**\r\n     * Exchanges an external account GCP access token for a service\r\n     * account impersonated access token using iamcredentials\r\n     * GenerateAccessToken API.\r\n     * @param token The access token to exchange for a service account access\r\n     *   token.\r\n     * @return A promise that resolves with the service account impersonated\r\n     *   credentials response.\r\n     */\n\n  }, {\n    key: \"getImpersonatedAccessToken\",\n    value: function () {\n      var _getImpersonatedAccessToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(token) {\n        var opts, response, successResponse;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                opts = {\n                  url: this.serviceAccountImpersonationUrl,\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json',\n                    Authorization: \"Bearer \".concat(token)\n                  },\n                  data: {\n                    scope: this.getScopesArray()\n                  },\n                  responseType: 'json'\n                };\n                _context6.next = 3;\n                return this.transporter.request(opts);\n\n              case 3:\n                response = _context6.sent;\n                successResponse = response.data;\n                return _context6.abrupt(\"return\", {\n                  access_token: successResponse.accessToken,\n                  // Convert from ISO format to timestamp.\n                  expiry_date: new Date(successResponse.expireTime).getTime(),\n                  res: response\n                });\n\n              case 6:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function getImpersonatedAccessToken(_x2) {\n        return _getImpersonatedAccessToken.apply(this, arguments);\n      }\n\n      return getImpersonatedAccessToken;\n    }()\n    /**\r\n     * Returns whether the provided credentials are expired or not.\r\n     * If there is no expiry time, assumes the token is not expired or expiring.\r\n     * @param accessToken The credentials to check for expiration.\r\n     * @return Whether the credentials are expired or not.\r\n     */\n\n  }, {\n    key: \"isExpired\",\n    value: function isExpired(accessToken) {\n      var now = new Date().getTime();\n      return accessToken.expiry_date ? now >= accessToken.expiry_date - this.eagerRefreshThresholdMillis : false;\n    }\n    /**\r\n     * @return The list of scopes for the requested GCP access token.\r\n     */\n\n  }, {\n    key: \"getScopesArray\",\n    value: function getScopesArray() {\n      // Since scopes can be provided as string or array, the type should\n      // be normalized.\n      if (typeof this.scopes === 'string') {\n        return [this.scopes];\n      } else if (typeof this.scopes === 'undefined') {\n        return [DEFAULT_OAUTH_SCOPE];\n      } else {\n        return this.scopes;\n      }\n    }\n    /**\r\n     * Checks whether Google APIs URL is valid.\r\n     * @param apiName The apiName of url.\r\n     * @param url The Google API URL to validate.\r\n     * @return Whether the URL is valid or not.\r\n     */\n\n  }, {\n    key: \"validateGoogleAPIsUrl\",\n    value: function validateGoogleAPIsUrl(apiName, url) {\n      var parsedUrl; // Return false if error is thrown during parsing URL.\n\n      try {\n        parsedUrl = new URL(url);\n      } catch (e) {\n        return false;\n      }\n\n      var urlDomain = parsedUrl.hostname; // Check the protocol is https.\n\n      if (parsedUrl.protocol !== 'https:') {\n        return false;\n      }\n\n      var googleAPIsDomainPatterns = [new RegExp('^' + VARIABLE_PORTION_PATTERN + '\\\\.' + apiName + GOOGLE_APIS_DOMAIN_PATTERN), new RegExp('^' + apiName + GOOGLE_APIS_DOMAIN_PATTERN), new RegExp('^' + apiName + '\\\\.' + VARIABLE_PORTION_PATTERN + GOOGLE_APIS_DOMAIN_PATTERN), new RegExp('^' + VARIABLE_PORTION_PATTERN + '\\\\-' + apiName + GOOGLE_APIS_DOMAIN_PATTERN)];\n\n      for (var _i = 0, _googleAPIsDomainPatt = googleAPIsDomainPatterns; _i < _googleAPIsDomainPatt.length; _i++) {\n        var googleAPIsDomainPattern = _googleAPIsDomainPatt[_i];\n\n        if (urlDomain.match(googleAPIsDomainPattern)) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  }]);\n\n  return BaseExternalAccountClient;\n}(authclient_1.AuthClient);\n\nexports.BaseExternalAccountClient = BaseExternalAccountClient;","map":{"version":3,"sources":["C:/Users/Enrique Niebles/Documents/Misión TIC 2021/Ciclo 3 - Desarrollo Software/Heroku/client/react/node_modules/google-auth-library/build/src/auth/baseexternalclient.js"],"names":["Object","defineProperty","exports","value","BaseExternalAccountClient","CLOUD_RESOURCE_MANAGER","EXTERNAL_ACCOUNT_TYPE","EXPIRATION_TIME_OFFSET","stream","require","authclient_1","sts","STS_GRANT_TYPE","STS_REQUEST_TOKEN_TYPE","DEFAULT_OAUTH_SCOPE","GOOGLE_APIS_DOMAIN_PATTERN","VARIABLE_PORTION_PATTERN","WORKFORCE_AUDIENCE_PATTERN","options","additionalOptions","type","Error","clientAuth","client_id","confidentialClientType","clientId","clientSecret","client_secret","undefined","validateGoogleAPIsUrl","token_url","stsCredential","StsCredentials","scopes","cachedAccessToken","audience","subjectTokenType","subject_token_type","quotaProjectId","quota_project_id","workforcePoolUserProject","workforce_pool_user_project","workforceAudiencePattern","RegExp","match","service_account_impersonation_url","serviceAccountImpersonationUrl","eagerRefreshThresholdMillis","forceRefreshOnFailure","projectId","projectNumber","getProjectNumber","_a","re","result","exec","groups","email","credentials","isExpired","refreshAccessTokenAsync","token","access_token","res","getAccessToken","accessTokenResponse","headers","Authorization","addSharedMetadataHeaders","opts","callback","requestAsync","then","r","e","response","getRequestHeaders","transporter","request","url","responseType","data","retry","requestHeaders","statusCode","status","isReadableStream","config","Readable","isAuthErr","retrieveSubjectToken","subjectToken","stsCredentialsOptions","grantType","requestedTokenType","scope","getScopesArray","userProject","exchangeToken","stsResponse","getImpersonatedAccessToken","expires_in","expiry_date","Date","getTime","assign","emit","refresh_token","token_type","id_token","method","successResponse","accessToken","expireTime","now","apiName","parsedUrl","URL","urlDomain","hostname","protocol","googleAPIsDomainPatterns","googleAPIsDomainPattern","AuthClient"],"mappings":"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","sourcesContent":["\"use strict\";\r\n// Copyright 2021 Google LLC\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//      http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.BaseExternalAccountClient = exports.CLOUD_RESOURCE_MANAGER = exports.EXTERNAL_ACCOUNT_TYPE = exports.EXPIRATION_TIME_OFFSET = void 0;\r\nconst stream = require(\"stream\");\r\nconst authclient_1 = require(\"./authclient\");\r\nconst sts = require(\"./stscredentials\");\r\n/**\r\n * The required token exchange grant_type: rfc8693#section-2.1\r\n */\r\nconst STS_GRANT_TYPE = 'urn:ietf:params:oauth:grant-type:token-exchange';\r\n/**\r\n * The requested token exchange requested_token_type: rfc8693#section-2.1\r\n */\r\nconst STS_REQUEST_TOKEN_TYPE = 'urn:ietf:params:oauth:token-type:access_token';\r\n/** The default OAuth scope to request when none is provided. */\r\nconst DEFAULT_OAUTH_SCOPE = 'https://www.googleapis.com/auth/cloud-platform';\r\n/** The google apis domain pattern. */\r\nconst GOOGLE_APIS_DOMAIN_PATTERN = '\\\\.googleapis\\\\.com$';\r\n/** The variable portion pattern in a Google APIs domain. */\r\nconst VARIABLE_PORTION_PATTERN = '[^\\\\.\\\\s\\\\/\\\\\\\\]+';\r\n/**\r\n * Offset to take into account network delays and server clock skews.\r\n */\r\nexports.EXPIRATION_TIME_OFFSET = 5 * 60 * 1000;\r\n/**\r\n * The credentials JSON file type for external account clients.\r\n * There are 3 types of JSON configs:\r\n * 1. authorized_user => Google end user credential\r\n * 2. service_account => Google service account credential\r\n * 3. external_Account => non-GCP service (eg. AWS, Azure, K8s)\r\n */\r\nexports.EXTERNAL_ACCOUNT_TYPE = 'external_account';\r\n/** Cloud resource manager URL used to retrieve project information. */\r\nexports.CLOUD_RESOURCE_MANAGER = 'https://cloudresourcemanager.googleapis.com/v1/projects/';\r\n/** The workforce audience pattern. */\r\nconst WORKFORCE_AUDIENCE_PATTERN = '//iam.googleapis.com/locations/[^/]+/workforcePools/[^/]+/providers/.+';\r\n/**\r\n * Base external account client. This is used to instantiate AuthClients for\r\n * exchanging external account credentials for GCP access token and authorizing\r\n * requests to GCP APIs.\r\n * The base class implements common logic for exchanging various type of\r\n * external credentials for GCP access token. The logic of determining and\r\n * retrieving the external credential based on the environment and\r\n * credential_source will be left for the subclasses.\r\n */\r\nclass BaseExternalAccountClient extends authclient_1.AuthClient {\r\n    /**\r\n     * Instantiate a BaseExternalAccountClient instance using the provided JSON\r\n     * object loaded from an external account credentials file.\r\n     * @param options The external account options object typically loaded\r\n     *   from the external account JSON credential file.\r\n     * @param additionalOptions Optional additional behavior customization\r\n     *   options. These currently customize expiration threshold time and\r\n     *   whether to retry on 401/403 API request errors.\r\n     */\r\n    constructor(options, additionalOptions) {\r\n        super();\r\n        if (options.type !== exports.EXTERNAL_ACCOUNT_TYPE) {\r\n            throw new Error(`Expected \"${exports.EXTERNAL_ACCOUNT_TYPE}\" type but ` +\r\n                `received \"${options.type}\"`);\r\n        }\r\n        this.clientAuth = options.client_id\r\n            ? {\r\n                confidentialClientType: 'basic',\r\n                clientId: options.client_id,\r\n                clientSecret: options.client_secret,\r\n            }\r\n            : undefined;\r\n        if (!this.validateGoogleAPIsUrl('sts', options.token_url)) {\r\n            throw new Error(`\"${options.token_url}\" is not a valid token url.`);\r\n        }\r\n        this.stsCredential = new sts.StsCredentials(options.token_url, this.clientAuth);\r\n        // Default OAuth scope. This could be overridden via public property.\r\n        this.scopes = [DEFAULT_OAUTH_SCOPE];\r\n        this.cachedAccessToken = null;\r\n        this.audience = options.audience;\r\n        this.subjectTokenType = options.subject_token_type;\r\n        this.quotaProjectId = options.quota_project_id;\r\n        this.workforcePoolUserProject = options.workforce_pool_user_project;\r\n        const workforceAudiencePattern = new RegExp(WORKFORCE_AUDIENCE_PATTERN);\r\n        if (this.workforcePoolUserProject &&\r\n            !this.audience.match(workforceAudiencePattern)) {\r\n            throw new Error('workforcePoolUserProject should not be set for non-workforce pool ' +\r\n                'credentials.');\r\n        }\r\n        if (typeof options.service_account_impersonation_url !== 'undefined' &&\r\n            !this.validateGoogleAPIsUrl('iamcredentials', options.service_account_impersonation_url)) {\r\n            throw new Error(`\"${options.service_account_impersonation_url}\" is ` +\r\n                'not a valid service account impersonation url.');\r\n        }\r\n        this.serviceAccountImpersonationUrl =\r\n            options.service_account_impersonation_url;\r\n        // As threshold could be zero,\r\n        // eagerRefreshThresholdMillis || EXPIRATION_TIME_OFFSET will override the\r\n        // zero value.\r\n        if (typeof (additionalOptions === null || additionalOptions === void 0 ? void 0 : additionalOptions.eagerRefreshThresholdMillis) !== 'number') {\r\n            this.eagerRefreshThresholdMillis = exports.EXPIRATION_TIME_OFFSET;\r\n        }\r\n        else {\r\n            this.eagerRefreshThresholdMillis = additionalOptions\r\n                .eagerRefreshThresholdMillis;\r\n        }\r\n        this.forceRefreshOnFailure = !!(additionalOptions === null || additionalOptions === void 0 ? void 0 : additionalOptions.forceRefreshOnFailure);\r\n        this.projectId = null;\r\n        this.projectNumber = this.getProjectNumber(this.audience);\r\n    }\r\n    /** The service account email to be impersonated, if available. */\r\n    getServiceAccountEmail() {\r\n        var _a;\r\n        if (this.serviceAccountImpersonationUrl) {\r\n            // Parse email from URL. The formal looks as follows:\r\n            // https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/name@project-id.iam.gserviceaccount.com:generateAccessToken\r\n            const re = /serviceAccounts\\/(?<email>[^:]+):generateAccessToken$/;\r\n            const result = re.exec(this.serviceAccountImpersonationUrl);\r\n            return ((_a = result === null || result === void 0 ? void 0 : result.groups) === null || _a === void 0 ? void 0 : _a.email) || null;\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Provides a mechanism to inject GCP access tokens directly.\r\n     * When the provided credential expires, a new credential, using the\r\n     * external account options, is retrieved.\r\n     * @param credentials The Credentials object to set on the current client.\r\n     */\r\n    setCredentials(credentials) {\r\n        super.setCredentials(credentials);\r\n        this.cachedAccessToken = credentials;\r\n    }\r\n    /**\r\n     * @return A promise that resolves with the current GCP access token\r\n     *   response. If the current credential is expired, a new one is retrieved.\r\n     */\r\n    async getAccessToken() {\r\n        // If cached access token is unavailable or expired, force refresh.\r\n        if (!this.cachedAccessToken || this.isExpired(this.cachedAccessToken)) {\r\n            await this.refreshAccessTokenAsync();\r\n        }\r\n        // Return GCP access token in GetAccessTokenResponse format.\r\n        return {\r\n            token: this.cachedAccessToken.access_token,\r\n            res: this.cachedAccessToken.res,\r\n        };\r\n    }\r\n    /**\r\n     * The main authentication interface. It takes an optional url which when\r\n     * present is the endpoint being accessed, and returns a Promise which\r\n     * resolves with authorization header fields.\r\n     *\r\n     * The result has the form:\r\n     * { Authorization: 'Bearer <access_token_value>' }\r\n     */\r\n    async getRequestHeaders() {\r\n        const accessTokenResponse = await this.getAccessToken();\r\n        const headers = {\r\n            Authorization: `Bearer ${accessTokenResponse.token}`,\r\n        };\r\n        return this.addSharedMetadataHeaders(headers);\r\n    }\r\n    request(opts, callback) {\r\n        if (callback) {\r\n            this.requestAsync(opts).then(r => callback(null, r), e => {\r\n                return callback(e, e.response);\r\n            });\r\n        }\r\n        else {\r\n            return this.requestAsync(opts);\r\n        }\r\n    }\r\n    /**\r\n     * @return A promise that resolves with the project ID corresponding to the\r\n     *   current workload identity pool or current workforce pool if\r\n     *   determinable. For workforce pool credential, it returns the project ID\r\n     *   corresponding to the workforcePoolUserProject.\r\n     *   This is introduced to match the current pattern of using the Auth\r\n     *   library:\r\n     *   const projectId = await auth.getProjectId();\r\n     *   const url = `https://dns.googleapis.com/dns/v1/projects/${projectId}`;\r\n     *   const res = await client.request({ url });\r\n     *   The resource may not have permission\r\n     *   (resourcemanager.projects.get) to call this API or the required\r\n     *   scopes may not be selected:\r\n     *   https://cloud.google.com/resource-manager/reference/rest/v1/projects/get#authorization-scopes\r\n     */\r\n    async getProjectId() {\r\n        const projectNumber = this.projectNumber || this.workforcePoolUserProject;\r\n        if (this.projectId) {\r\n            // Return previously determined project ID.\r\n            return this.projectId;\r\n        }\r\n        else if (projectNumber) {\r\n            // Preferable not to use request() to avoid retrial policies.\r\n            const headers = await this.getRequestHeaders();\r\n            const response = await this.transporter.request({\r\n                headers,\r\n                url: `${exports.CLOUD_RESOURCE_MANAGER}${projectNumber}`,\r\n                responseType: 'json',\r\n            });\r\n            this.projectId = response.data.projectId;\r\n            return this.projectId;\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Authenticates the provided HTTP request, processes it and resolves with the\r\n     * returned response.\r\n     * @param opts The HTTP request options.\r\n     * @param retry Whether the current attempt is a retry after a failed attempt.\r\n     * @return A promise that resolves with the successful response.\r\n     */\r\n    async requestAsync(opts, retry = false) {\r\n        let response;\r\n        try {\r\n            const requestHeaders = await this.getRequestHeaders();\r\n            opts.headers = opts.headers || {};\r\n            if (requestHeaders && requestHeaders['x-goog-user-project']) {\r\n                opts.headers['x-goog-user-project'] =\r\n                    requestHeaders['x-goog-user-project'];\r\n            }\r\n            if (requestHeaders && requestHeaders.Authorization) {\r\n                opts.headers.Authorization = requestHeaders.Authorization;\r\n            }\r\n            response = await this.transporter.request(opts);\r\n        }\r\n        catch (e) {\r\n            const res = e.response;\r\n            if (res) {\r\n                const statusCode = res.status;\r\n                // Retry the request for metadata if the following criteria are true:\r\n                // - We haven't already retried.  It only makes sense to retry once.\r\n                // - The response was a 401 or a 403\r\n                // - The request didn't send a readableStream\r\n                // - forceRefreshOnFailure is true\r\n                const isReadableStream = res.config.data instanceof stream.Readable;\r\n                const isAuthErr = statusCode === 401 || statusCode === 403;\r\n                if (!retry &&\r\n                    isAuthErr &&\r\n                    !isReadableStream &&\r\n                    this.forceRefreshOnFailure) {\r\n                    await this.refreshAccessTokenAsync();\r\n                    return await this.requestAsync(opts, true);\r\n                }\r\n            }\r\n            throw e;\r\n        }\r\n        return response;\r\n    }\r\n    /**\r\n     * Forces token refresh, even if unexpired tokens are currently cached.\r\n     * External credentials are exchanged for GCP access tokens via the token\r\n     * exchange endpoint and other settings provided in the client options\r\n     * object.\r\n     * If the service_account_impersonation_url is provided, an additional\r\n     * step to exchange the external account GCP access token for a service\r\n     * account impersonated token is performed.\r\n     * @return A promise that resolves with the fresh GCP access tokens.\r\n     */\r\n    async refreshAccessTokenAsync() {\r\n        // Retrieve the external credential.\r\n        const subjectToken = await this.retrieveSubjectToken();\r\n        // Construct the STS credentials options.\r\n        const stsCredentialsOptions = {\r\n            grantType: STS_GRANT_TYPE,\r\n            audience: this.audience,\r\n            requestedTokenType: STS_REQUEST_TOKEN_TYPE,\r\n            subjectToken,\r\n            subjectTokenType: this.subjectTokenType,\r\n            // generateAccessToken requires the provided access token to have\r\n            // scopes:\r\n            // https://www.googleapis.com/auth/iam or\r\n            // https://www.googleapis.com/auth/cloud-platform\r\n            // The new service account access token scopes will match the user\r\n            // provided ones.\r\n            scope: this.serviceAccountImpersonationUrl\r\n                ? [DEFAULT_OAUTH_SCOPE]\r\n                : this.getScopesArray(),\r\n        };\r\n        // Exchange the external credentials for a GCP access token.\r\n        // Client auth is prioritized over passing the workforcePoolUserProject\r\n        // parameter for STS token exchange.\r\n        const additionalOptions = !this.clientAuth && this.workforcePoolUserProject\r\n            ? { userProject: this.workforcePoolUserProject }\r\n            : undefined;\r\n        const stsResponse = await this.stsCredential.exchangeToken(stsCredentialsOptions, undefined, additionalOptions);\r\n        if (this.serviceAccountImpersonationUrl) {\r\n            this.cachedAccessToken = await this.getImpersonatedAccessToken(stsResponse.access_token);\r\n        }\r\n        else if (stsResponse.expires_in) {\r\n            // Save response in cached access token.\r\n            this.cachedAccessToken = {\r\n                access_token: stsResponse.access_token,\r\n                expiry_date: new Date().getTime() + stsResponse.expires_in * 1000,\r\n                res: stsResponse.res,\r\n            };\r\n        }\r\n        else {\r\n            // Save response in cached access token.\r\n            this.cachedAccessToken = {\r\n                access_token: stsResponse.access_token,\r\n                res: stsResponse.res,\r\n            };\r\n        }\r\n        // Save credentials.\r\n        this.credentials = {};\r\n        Object.assign(this.credentials, this.cachedAccessToken);\r\n        delete this.credentials.res;\r\n        // Trigger tokens event to notify external listeners.\r\n        this.emit('tokens', {\r\n            refresh_token: null,\r\n            expiry_date: this.cachedAccessToken.expiry_date,\r\n            access_token: this.cachedAccessToken.access_token,\r\n            token_type: 'Bearer',\r\n            id_token: null,\r\n        });\r\n        // Return the cached access token.\r\n        return this.cachedAccessToken;\r\n    }\r\n    /**\r\n     * Returns the workload identity pool project number if it is determinable\r\n     * from the audience resource name.\r\n     * @param audience The STS audience used to determine the project number.\r\n     * @return The project number associated with the workload identity pool, if\r\n     *   this can be determined from the STS audience field. Otherwise, null is\r\n     *   returned.\r\n     */\r\n    getProjectNumber(audience) {\r\n        // STS audience pattern:\r\n        // //iam.googleapis.com/projects/$PROJECT_NUMBER/locations/...\r\n        const match = audience.match(/\\/projects\\/([^/]+)/);\r\n        if (!match) {\r\n            return null;\r\n        }\r\n        return match[1];\r\n    }\r\n    /**\r\n     * Exchanges an external account GCP access token for a service\r\n     * account impersonated access token using iamcredentials\r\n     * GenerateAccessToken API.\r\n     * @param token The access token to exchange for a service account access\r\n     *   token.\r\n     * @return A promise that resolves with the service account impersonated\r\n     *   credentials response.\r\n     */\r\n    async getImpersonatedAccessToken(token) {\r\n        const opts = {\r\n            url: this.serviceAccountImpersonationUrl,\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: `Bearer ${token}`,\r\n            },\r\n            data: {\r\n                scope: this.getScopesArray(),\r\n            },\r\n            responseType: 'json',\r\n        };\r\n        const response = await this.transporter.request(opts);\r\n        const successResponse = response.data;\r\n        return {\r\n            access_token: successResponse.accessToken,\r\n            // Convert from ISO format to timestamp.\r\n            expiry_date: new Date(successResponse.expireTime).getTime(),\r\n            res: response,\r\n        };\r\n    }\r\n    /**\r\n     * Returns whether the provided credentials are expired or not.\r\n     * If there is no expiry time, assumes the token is not expired or expiring.\r\n     * @param accessToken The credentials to check for expiration.\r\n     * @return Whether the credentials are expired or not.\r\n     */\r\n    isExpired(accessToken) {\r\n        const now = new Date().getTime();\r\n        return accessToken.expiry_date\r\n            ? now >= accessToken.expiry_date - this.eagerRefreshThresholdMillis\r\n            : false;\r\n    }\r\n    /**\r\n     * @return The list of scopes for the requested GCP access token.\r\n     */\r\n    getScopesArray() {\r\n        // Since scopes can be provided as string or array, the type should\r\n        // be normalized.\r\n        if (typeof this.scopes === 'string') {\r\n            return [this.scopes];\r\n        }\r\n        else if (typeof this.scopes === 'undefined') {\r\n            return [DEFAULT_OAUTH_SCOPE];\r\n        }\r\n        else {\r\n            return this.scopes;\r\n        }\r\n    }\r\n    /**\r\n     * Checks whether Google APIs URL is valid.\r\n     * @param apiName The apiName of url.\r\n     * @param url The Google API URL to validate.\r\n     * @return Whether the URL is valid or not.\r\n     */\r\n    validateGoogleAPIsUrl(apiName, url) {\r\n        let parsedUrl;\r\n        // Return false if error is thrown during parsing URL.\r\n        try {\r\n            parsedUrl = new URL(url);\r\n        }\r\n        catch (e) {\r\n            return false;\r\n        }\r\n        const urlDomain = parsedUrl.hostname;\r\n        // Check the protocol is https.\r\n        if (parsedUrl.protocol !== 'https:') {\r\n            return false;\r\n        }\r\n        const googleAPIsDomainPatterns = [\r\n            new RegExp('^' +\r\n                VARIABLE_PORTION_PATTERN +\r\n                '\\\\.' +\r\n                apiName +\r\n                GOOGLE_APIS_DOMAIN_PATTERN),\r\n            new RegExp('^' + apiName + GOOGLE_APIS_DOMAIN_PATTERN),\r\n            new RegExp('^' +\r\n                apiName +\r\n                '\\\\.' +\r\n                VARIABLE_PORTION_PATTERN +\r\n                GOOGLE_APIS_DOMAIN_PATTERN),\r\n            new RegExp('^' +\r\n                VARIABLE_PORTION_PATTERN +\r\n                '\\\\-' +\r\n                apiName +\r\n                GOOGLE_APIS_DOMAIN_PATTERN),\r\n        ];\r\n        for (const googleAPIsDomainPattern of googleAPIsDomainPatterns) {\r\n            if (urlDomain.match(googleAPIsDomainPattern)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\nexports.BaseExternalAccountClient = BaseExternalAccountClient;\r\n//# sourceMappingURL=baseexternalclient.js.map"]},"metadata":{},"sourceType":"script"}