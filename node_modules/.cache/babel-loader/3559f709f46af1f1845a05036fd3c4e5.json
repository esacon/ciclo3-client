{"ast":null,"code":"\"use strict\"; // Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar _regeneratorRuntime = require(\"C:/Users/Enrique Niebles/Documents/Misi\\xF3n TIC 2021/Ciclo 3 - Desarrollo Software/Heroku/client/react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:/Users/Enrique Niebles/Documents/Misi\\xF3n TIC 2021/Ciclo 3 - Desarrollo Software/Heroku/client/react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"C:/Users/Enrique Niebles/Documents/Misi\\xF3n TIC 2021/Ciclo 3 - Desarrollo Software/Heroku/client/react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/Enrique Niebles/Documents/Misi\\xF3n TIC 2021/Ciclo 3 - Desarrollo Software/Heroku/client/react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AwsRequestSigner = void 0;\n\nvar crypto_1 = require(\"../crypto/crypto\");\n/** AWS Signature Version 4 signing algorithm identifier.  */\n\n\nvar AWS_ALGORITHM = 'AWS4-HMAC-SHA256';\n/**\r\n * The termination string for the AWS credential scope value as defined in\r\n * https://docs.aws.amazon.com/general/latest/gr/sigv4-create-string-to-sign.html\r\n */\n\nvar AWS_REQUEST_TYPE = 'aws4_request';\n/**\r\n * Implements an AWS API request signer based on the AWS Signature Version 4\r\n * signing process.\r\n * https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\r\n */\n\nvar AwsRequestSigner = /*#__PURE__*/function () {\n  /**\r\n   * Instantiates an AWS API request signer used to send authenticated signed\r\n   * requests to AWS APIs based on the AWS Signature Version 4 signing process.\r\n   * This also provides a mechanism to generate the signed request without\r\n   * sending it.\r\n   * @param getCredentials A mechanism to retrieve AWS security credentials\r\n   *   when needed.\r\n   * @param region The AWS region to use.\r\n   */\n  function AwsRequestSigner(getCredentials, region) {\n    _classCallCheck(this, AwsRequestSigner);\n\n    this.getCredentials = getCredentials;\n    this.region = region;\n    this.crypto = crypto_1.createCrypto();\n  }\n  /**\r\n   * Generates the signed request for the provided HTTP request for calling\r\n   * an AWS API. This follows the steps described at:\r\n   * https://docs.aws.amazon.com/general/latest/gr/sigv4_signing.html\r\n   * @param amzOptions The AWS request options that need to be signed.\r\n   * @return A promise that resolves with the GaxiosOptions containing the\r\n   *   signed HTTP request parameters.\r\n   */\n\n\n  _createClass(AwsRequestSigner, [{\n    key: \"getRequestOptions\",\n    value: function () {\n      var _getRequestOptions = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(amzOptions) {\n        var requestPayloadData, url, method, requestPayload, additionalAmzHeaders, awsSecurityCredentials, uri, headerMap, headers, awsSignedReq;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (amzOptions.url) {\n                  _context.next = 2;\n                  break;\n                }\n\n                throw new Error('\"url\" is required in \"amzOptions\"');\n\n              case 2:\n                // Stringify JSON requests. This will be set in the request body of the\n                // generated signed request.\n                requestPayloadData = typeof amzOptions.data === 'object' ? JSON.stringify(amzOptions.data) : amzOptions.data;\n                url = amzOptions.url;\n                method = amzOptions.method || 'GET';\n                requestPayload = amzOptions.body || requestPayloadData;\n                additionalAmzHeaders = amzOptions.headers;\n                _context.next = 9;\n                return this.getCredentials();\n\n              case 9:\n                awsSecurityCredentials = _context.sent;\n                uri = new URL(url);\n                _context.next = 13;\n                return generateAuthenticationHeaderMap({\n                  crypto: this.crypto,\n                  host: uri.host,\n                  canonicalUri: uri.pathname,\n                  canonicalQuerystring: uri.search.substr(1),\n                  method: method,\n                  region: this.region,\n                  securityCredentials: awsSecurityCredentials,\n                  requestPayload: requestPayload,\n                  additionalAmzHeaders: additionalAmzHeaders\n                });\n\n              case 13:\n                headerMap = _context.sent;\n                // Append additional optional headers, eg. X-Amz-Target, Content-Type, etc.\n                headers = Object.assign( // Add x-amz-date if available.\n                headerMap.amzDate ? {\n                  'x-amz-date': headerMap.amzDate\n                } : {}, {\n                  Authorization: headerMap.authorizationHeader,\n                  host: uri.host\n                }, additionalAmzHeaders || {});\n\n                if (awsSecurityCredentials.token) {\n                  Object.assign(headers, {\n                    'x-amz-security-token': awsSecurityCredentials.token\n                  });\n                }\n\n                awsSignedReq = {\n                  url: url,\n                  method: method,\n                  headers: headers\n                };\n\n                if (typeof requestPayload !== 'undefined') {\n                  awsSignedReq.body = requestPayload;\n                }\n\n                return _context.abrupt(\"return\", awsSignedReq);\n\n              case 19:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getRequestOptions(_x) {\n        return _getRequestOptions.apply(this, arguments);\n      }\n\n      return getRequestOptions;\n    }()\n  }]);\n\n  return AwsRequestSigner;\n}();\n\nexports.AwsRequestSigner = AwsRequestSigner;\n/**\r\n * Creates the HMAC-SHA256 hash of the provided message using the\r\n * provided key.\r\n *\r\n * @param crypto The crypto instance used to facilitate cryptographic\r\n *   operations.\r\n * @param key The HMAC-SHA256 key to use.\r\n * @param msg The message to hash.\r\n * @return The computed hash bytes.\r\n */\n\nfunction sign(_x2, _x3, _x4) {\n  return _sign.apply(this, arguments);\n}\n/**\r\n * Calculates the signing key used to calculate the signature for\r\n * AWS Signature Version 4 based on:\r\n * https://docs.aws.amazon.com/general/latest/gr/sigv4-calculate-signature.html\r\n *\r\n * @param crypto The crypto instance used to facilitate cryptographic\r\n *   operations.\r\n * @param key The AWS secret access key.\r\n * @param dateStamp The '%Y%m%d' date format.\r\n * @param region The AWS region.\r\n * @param serviceName The AWS service name, eg. sts.\r\n * @return The signing key bytes.\r\n */\n\n\nfunction _sign() {\n  _sign = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(crypto, key, msg) {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return crypto.signWithHmacSha256(key, msg);\n\n          case 2:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _sign.apply(this, arguments);\n}\n\nfunction getSigningKey(_x5, _x6, _x7, _x8, _x9) {\n  return _getSigningKey.apply(this, arguments);\n}\n/**\r\n * Generates the authentication header map needed for generating the AWS\r\n * Signature Version 4 signed request.\r\n *\r\n * @param option The options needed to compute the authentication header map.\r\n * @return The AWS authentication header map which constitutes of the following\r\n *   components: amz-date, authorization header and canonical query string.\r\n */\n\n\nfunction _getSigningKey() {\n  _getSigningKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(crypto, key, dateStamp, region, serviceName) {\n    var kDate, kRegion, kService, kSigning;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return sign(crypto, \"AWS4\".concat(key), dateStamp);\n\n          case 2:\n            kDate = _context3.sent;\n            _context3.next = 5;\n            return sign(crypto, kDate, region);\n\n          case 5:\n            kRegion = _context3.sent;\n            _context3.next = 8;\n            return sign(crypto, kRegion, serviceName);\n\n          case 8:\n            kService = _context3.sent;\n            _context3.next = 11;\n            return sign(crypto, kService, 'aws4_request');\n\n          case 11:\n            kSigning = _context3.sent;\n            return _context3.abrupt(\"return\", kSigning);\n\n          case 13:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _getSigningKey.apply(this, arguments);\n}\n\nfunction generateAuthenticationHeaderMap(_x10) {\n  return _generateAuthenticationHeaderMap.apply(this, arguments);\n}\n\nfunction _generateAuthenticationHeaderMap() {\n  _generateAuthenticationHeaderMap = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(options) {\n    var additionalAmzHeaders, requestPayload, serviceName, now, amzDate, dateStamp, reformattedAdditionalAmzHeaders, amzHeaders, canonicalHeaders, signedHeadersList, signedHeaders, payloadHash, canonicalRequest, credentialScope, stringToSign, signingKey, signature, authorizationHeader;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            additionalAmzHeaders = options.additionalAmzHeaders || {};\n            requestPayload = options.requestPayload || ''; // iam.amazonaws.com host => iam service.\n            // sts.us-east-2.amazonaws.com => sts service.\n\n            serviceName = options.host.split('.')[0];\n            now = new Date(); // Format: '%Y%m%dT%H%M%SZ'.\n\n            amzDate = now.toISOString().replace(/[-:]/g, '').replace(/\\.[0-9]+/, ''); // Format: '%Y%m%d'.\n\n            dateStamp = now.toISOString().replace(/[-]/g, '').replace(/T.*/, ''); // Change all additional headers to be lower case.\n\n            reformattedAdditionalAmzHeaders = {};\n            Object.keys(additionalAmzHeaders).forEach(function (key) {\n              reformattedAdditionalAmzHeaders[key.toLowerCase()] = additionalAmzHeaders[key];\n            }); // Add AWS token if available.\n\n            if (options.securityCredentials.token) {\n              reformattedAdditionalAmzHeaders['x-amz-security-token'] = options.securityCredentials.token;\n            } // Header keys need to be sorted alphabetically.\n\n\n            amzHeaders = Object.assign({\n              host: options.host\n            }, // Previously the date was not fixed with x-amz- and could be provided manually.\n            // https://github.com/boto/botocore/blob/879f8440a4e9ace5d3cf145ce8b3d5e5ffb892ef/tests/unit/auth/aws4_testsuite/get-header-value-trim.req\n            reformattedAdditionalAmzHeaders.date ? {} : {\n              'x-amz-date': amzDate\n            }, reformattedAdditionalAmzHeaders);\n            canonicalHeaders = '';\n            signedHeadersList = Object.keys(amzHeaders).sort();\n            signedHeadersList.forEach(function (key) {\n              canonicalHeaders += \"\".concat(key, \":\").concat(amzHeaders[key], \"\\n\");\n            });\n            signedHeaders = signedHeadersList.join(';');\n            _context4.next = 16;\n            return options.crypto.sha256DigestHex(requestPayload);\n\n          case 16:\n            payloadHash = _context4.sent;\n            // https://docs.aws.amazon.com/general/latest/gr/sigv4-create-canonical-request.html\n            canonicalRequest = \"\".concat(options.method, \"\\n\") + \"\".concat(options.canonicalUri, \"\\n\") + \"\".concat(options.canonicalQuerystring, \"\\n\") + \"\".concat(canonicalHeaders, \"\\n\") + \"\".concat(signedHeaders, \"\\n\") + \"\".concat(payloadHash);\n            credentialScope = \"\".concat(dateStamp, \"/\").concat(options.region, \"/\").concat(serviceName, \"/\").concat(AWS_REQUEST_TYPE); // https://docs.aws.amazon.com/general/latest/gr/sigv4-create-string-to-sign.html\n\n            _context4.t0 = \"\".concat(AWS_ALGORITHM, \"\\n\") + \"\".concat(amzDate, \"\\n\") + \"\".concat(credentialScope, \"\\n\");\n            _context4.next = 22;\n            return options.crypto.sha256DigestHex(canonicalRequest);\n\n          case 22:\n            _context4.t1 = _context4.sent;\n            stringToSign = _context4.t0 + _context4.t1;\n            _context4.next = 26;\n            return getSigningKey(options.crypto, options.securityCredentials.secretAccessKey, dateStamp, options.region, serviceName);\n\n          case 26:\n            signingKey = _context4.sent;\n            _context4.next = 29;\n            return sign(options.crypto, signingKey, stringToSign);\n\n          case 29:\n            signature = _context4.sent;\n            // https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html\n            authorizationHeader = \"\".concat(AWS_ALGORITHM, \" Credential=\").concat(options.securityCredentials.accessKeyId, \"/\") + \"\".concat(credentialScope, \", SignedHeaders=\").concat(signedHeaders, \", \") + \"Signature=\".concat(crypto_1.fromArrayBufferToHex(signature));\n            return _context4.abrupt(\"return\", {\n              // Do not return x-amz-date if date is available.\n              amzDate: reformattedAdditionalAmzHeaders.date ? undefined : amzDate,\n              authorizationHeader: authorizationHeader,\n              canonicalQuerystring: options.canonicalQuerystring\n            });\n\n          case 32:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _generateAuthenticationHeaderMap.apply(this, arguments);\n}","map":{"version":3,"sources":["C:/Users/Enrique Niebles/Documents/Misión TIC 2021/Ciclo 3 - Desarrollo Software/Heroku/client/react/node_modules/google-auth-library/build/src/auth/awsrequestsigner.js"],"names":["Object","defineProperty","exports","value","AwsRequestSigner","crypto_1","require","AWS_ALGORITHM","AWS_REQUEST_TYPE","getCredentials","region","crypto","createCrypto","amzOptions","url","Error","requestPayloadData","data","JSON","stringify","method","requestPayload","body","additionalAmzHeaders","headers","awsSecurityCredentials","uri","URL","generateAuthenticationHeaderMap","host","canonicalUri","pathname","canonicalQuerystring","search","substr","securityCredentials","headerMap","assign","amzDate","Authorization","authorizationHeader","token","awsSignedReq","sign","key","msg","signWithHmacSha256","getSigningKey","dateStamp","serviceName","kDate","kRegion","kService","kSigning","options","split","now","Date","toISOString","replace","reformattedAdditionalAmzHeaders","keys","forEach","toLowerCase","amzHeaders","date","canonicalHeaders","signedHeadersList","sort","signedHeaders","join","sha256DigestHex","payloadHash","canonicalRequest","credentialScope","stringToSign","secretAccessKey","signingKey","signature","accessKeyId","fromArrayBufferToHex","undefined"],"mappings":"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","sourcesContent":["\"use strict\";\r\n// Copyright 2021 Google LLC\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//      http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.AwsRequestSigner = void 0;\r\nconst crypto_1 = require(\"../crypto/crypto\");\r\n/** AWS Signature Version 4 signing algorithm identifier.  */\r\nconst AWS_ALGORITHM = 'AWS4-HMAC-SHA256';\r\n/**\r\n * The termination string for the AWS credential scope value as defined in\r\n * https://docs.aws.amazon.com/general/latest/gr/sigv4-create-string-to-sign.html\r\n */\r\nconst AWS_REQUEST_TYPE = 'aws4_request';\r\n/**\r\n * Implements an AWS API request signer based on the AWS Signature Version 4\r\n * signing process.\r\n * https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\r\n */\r\nclass AwsRequestSigner {\r\n    /**\r\n     * Instantiates an AWS API request signer used to send authenticated signed\r\n     * requests to AWS APIs based on the AWS Signature Version 4 signing process.\r\n     * This also provides a mechanism to generate the signed request without\r\n     * sending it.\r\n     * @param getCredentials A mechanism to retrieve AWS security credentials\r\n     *   when needed.\r\n     * @param region The AWS region to use.\r\n     */\r\n    constructor(getCredentials, region) {\r\n        this.getCredentials = getCredentials;\r\n        this.region = region;\r\n        this.crypto = crypto_1.createCrypto();\r\n    }\r\n    /**\r\n     * Generates the signed request for the provided HTTP request for calling\r\n     * an AWS API. This follows the steps described at:\r\n     * https://docs.aws.amazon.com/general/latest/gr/sigv4_signing.html\r\n     * @param amzOptions The AWS request options that need to be signed.\r\n     * @return A promise that resolves with the GaxiosOptions containing the\r\n     *   signed HTTP request parameters.\r\n     */\r\n    async getRequestOptions(amzOptions) {\r\n        if (!amzOptions.url) {\r\n            throw new Error('\"url\" is required in \"amzOptions\"');\r\n        }\r\n        // Stringify JSON requests. This will be set in the request body of the\r\n        // generated signed request.\r\n        const requestPayloadData = typeof amzOptions.data === 'object'\r\n            ? JSON.stringify(amzOptions.data)\r\n            : amzOptions.data;\r\n        const url = amzOptions.url;\r\n        const method = amzOptions.method || 'GET';\r\n        const requestPayload = amzOptions.body || requestPayloadData;\r\n        const additionalAmzHeaders = amzOptions.headers;\r\n        const awsSecurityCredentials = await this.getCredentials();\r\n        const uri = new URL(url);\r\n        const headerMap = await generateAuthenticationHeaderMap({\r\n            crypto: this.crypto,\r\n            host: uri.host,\r\n            canonicalUri: uri.pathname,\r\n            canonicalQuerystring: uri.search.substr(1),\r\n            method,\r\n            region: this.region,\r\n            securityCredentials: awsSecurityCredentials,\r\n            requestPayload,\r\n            additionalAmzHeaders,\r\n        });\r\n        // Append additional optional headers, eg. X-Amz-Target, Content-Type, etc.\r\n        const headers = Object.assign(\r\n        // Add x-amz-date if available.\r\n        headerMap.amzDate ? { 'x-amz-date': headerMap.amzDate } : {}, {\r\n            Authorization: headerMap.authorizationHeader,\r\n            host: uri.host,\r\n        }, additionalAmzHeaders || {});\r\n        if (awsSecurityCredentials.token) {\r\n            Object.assign(headers, {\r\n                'x-amz-security-token': awsSecurityCredentials.token,\r\n            });\r\n        }\r\n        const awsSignedReq = {\r\n            url,\r\n            method: method,\r\n            headers,\r\n        };\r\n        if (typeof requestPayload !== 'undefined') {\r\n            awsSignedReq.body = requestPayload;\r\n        }\r\n        return awsSignedReq;\r\n    }\r\n}\r\nexports.AwsRequestSigner = AwsRequestSigner;\r\n/**\r\n * Creates the HMAC-SHA256 hash of the provided message using the\r\n * provided key.\r\n *\r\n * @param crypto The crypto instance used to facilitate cryptographic\r\n *   operations.\r\n * @param key The HMAC-SHA256 key to use.\r\n * @param msg The message to hash.\r\n * @return The computed hash bytes.\r\n */\r\nasync function sign(crypto, key, msg) {\r\n    return await crypto.signWithHmacSha256(key, msg);\r\n}\r\n/**\r\n * Calculates the signing key used to calculate the signature for\r\n * AWS Signature Version 4 based on:\r\n * https://docs.aws.amazon.com/general/latest/gr/sigv4-calculate-signature.html\r\n *\r\n * @param crypto The crypto instance used to facilitate cryptographic\r\n *   operations.\r\n * @param key The AWS secret access key.\r\n * @param dateStamp The '%Y%m%d' date format.\r\n * @param region The AWS region.\r\n * @param serviceName The AWS service name, eg. sts.\r\n * @return The signing key bytes.\r\n */\r\nasync function getSigningKey(crypto, key, dateStamp, region, serviceName) {\r\n    const kDate = await sign(crypto, `AWS4${key}`, dateStamp);\r\n    const kRegion = await sign(crypto, kDate, region);\r\n    const kService = await sign(crypto, kRegion, serviceName);\r\n    const kSigning = await sign(crypto, kService, 'aws4_request');\r\n    return kSigning;\r\n}\r\n/**\r\n * Generates the authentication header map needed for generating the AWS\r\n * Signature Version 4 signed request.\r\n *\r\n * @param option The options needed to compute the authentication header map.\r\n * @return The AWS authentication header map which constitutes of the following\r\n *   components: amz-date, authorization header and canonical query string.\r\n */\r\nasync function generateAuthenticationHeaderMap(options) {\r\n    const additionalAmzHeaders = options.additionalAmzHeaders || {};\r\n    const requestPayload = options.requestPayload || '';\r\n    // iam.amazonaws.com host => iam service.\r\n    // sts.us-east-2.amazonaws.com => sts service.\r\n    const serviceName = options.host.split('.')[0];\r\n    const now = new Date();\r\n    // Format: '%Y%m%dT%H%M%SZ'.\r\n    const amzDate = now\r\n        .toISOString()\r\n        .replace(/[-:]/g, '')\r\n        .replace(/\\.[0-9]+/, '');\r\n    // Format: '%Y%m%d'.\r\n    const dateStamp = now.toISOString().replace(/[-]/g, '').replace(/T.*/, '');\r\n    // Change all additional headers to be lower case.\r\n    const reformattedAdditionalAmzHeaders = {};\r\n    Object.keys(additionalAmzHeaders).forEach(key => {\r\n        reformattedAdditionalAmzHeaders[key.toLowerCase()] =\r\n            additionalAmzHeaders[key];\r\n    });\r\n    // Add AWS token if available.\r\n    if (options.securityCredentials.token) {\r\n        reformattedAdditionalAmzHeaders['x-amz-security-token'] =\r\n            options.securityCredentials.token;\r\n    }\r\n    // Header keys need to be sorted alphabetically.\r\n    const amzHeaders = Object.assign({\r\n        host: options.host,\r\n    }, \r\n    // Previously the date was not fixed with x-amz- and could be provided manually.\r\n    // https://github.com/boto/botocore/blob/879f8440a4e9ace5d3cf145ce8b3d5e5ffb892ef/tests/unit/auth/aws4_testsuite/get-header-value-trim.req\r\n    reformattedAdditionalAmzHeaders.date ? {} : { 'x-amz-date': amzDate }, reformattedAdditionalAmzHeaders);\r\n    let canonicalHeaders = '';\r\n    const signedHeadersList = Object.keys(amzHeaders).sort();\r\n    signedHeadersList.forEach(key => {\r\n        canonicalHeaders += `${key}:${amzHeaders[key]}\\n`;\r\n    });\r\n    const signedHeaders = signedHeadersList.join(';');\r\n    const payloadHash = await options.crypto.sha256DigestHex(requestPayload);\r\n    // https://docs.aws.amazon.com/general/latest/gr/sigv4-create-canonical-request.html\r\n    const canonicalRequest = `${options.method}\\n` +\r\n        `${options.canonicalUri}\\n` +\r\n        `${options.canonicalQuerystring}\\n` +\r\n        `${canonicalHeaders}\\n` +\r\n        `${signedHeaders}\\n` +\r\n        `${payloadHash}`;\r\n    const credentialScope = `${dateStamp}/${options.region}/${serviceName}/${AWS_REQUEST_TYPE}`;\r\n    // https://docs.aws.amazon.com/general/latest/gr/sigv4-create-string-to-sign.html\r\n    const stringToSign = `${AWS_ALGORITHM}\\n` +\r\n        `${amzDate}\\n` +\r\n        `${credentialScope}\\n` +\r\n        (await options.crypto.sha256DigestHex(canonicalRequest));\r\n    // https://docs.aws.amazon.com/general/latest/gr/sigv4-calculate-signature.html\r\n    const signingKey = await getSigningKey(options.crypto, options.securityCredentials.secretAccessKey, dateStamp, options.region, serviceName);\r\n    const signature = await sign(options.crypto, signingKey, stringToSign);\r\n    // https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html\r\n    const authorizationHeader = `${AWS_ALGORITHM} Credential=${options.securityCredentials.accessKeyId}/` +\r\n        `${credentialScope}, SignedHeaders=${signedHeaders}, ` +\r\n        `Signature=${crypto_1.fromArrayBufferToHex(signature)}`;\r\n    return {\r\n        // Do not return x-amz-date if date is available.\r\n        amzDate: reformattedAdditionalAmzHeaders.date ? undefined : amzDate,\r\n        authorizationHeader,\r\n        canonicalQuerystring: options.canonicalQuerystring,\r\n    };\r\n}\r\n//# sourceMappingURL=awsrequestsigner.js.map"]},"metadata":{},"sourceType":"script"}