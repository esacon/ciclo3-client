{"ast":null,"code":"\"use strict\"; // Copyright 2018 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getEnv = exports.clear = exports.GCPEnv = void 0;\n\nconst gcpMetadata = require(\"gcp-metadata\");\n\nvar GCPEnv;\n\n(function (GCPEnv) {\n  GCPEnv[\"APP_ENGINE\"] = \"APP_ENGINE\";\n  GCPEnv[\"KUBERNETES_ENGINE\"] = \"KUBERNETES_ENGINE\";\n  GCPEnv[\"CLOUD_FUNCTIONS\"] = \"CLOUD_FUNCTIONS\";\n  GCPEnv[\"COMPUTE_ENGINE\"] = \"COMPUTE_ENGINE\";\n  GCPEnv[\"CLOUD_RUN\"] = \"CLOUD_RUN\";\n  GCPEnv[\"NONE\"] = \"NONE\";\n})(GCPEnv = exports.GCPEnv || (exports.GCPEnv = {}));\n\nlet envPromise;\n\nfunction clear() {\n  envPromise = undefined;\n}\n\nexports.clear = clear;\n\nasync function getEnv() {\n  if (envPromise) {\n    return envPromise;\n  }\n\n  envPromise = getEnvMemoized();\n  return envPromise;\n}\n\nexports.getEnv = getEnv;\n\nasync function getEnvMemoized() {\n  let env = GCPEnv.NONE;\n\n  if (isAppEngine()) {\n    env = GCPEnv.APP_ENGINE;\n  } else if (isCloudFunction()) {\n    env = GCPEnv.CLOUD_FUNCTIONS;\n  } else if (await isComputeEngine()) {\n    if (await isKubernetesEngine()) {\n      env = GCPEnv.KUBERNETES_ENGINE;\n    } else if (isCloudRun()) {\n      env = GCPEnv.CLOUD_RUN;\n    } else {\n      env = GCPEnv.COMPUTE_ENGINE;\n    }\n  } else {\n    env = GCPEnv.NONE;\n  }\n\n  return env;\n}\n\nfunction isAppEngine() {\n  return !!(process.env.GAE_SERVICE || process.env.GAE_MODULE_NAME);\n}\n\nfunction isCloudFunction() {\n  return !!(process.env.FUNCTION_NAME || process.env.FUNCTION_TARGET);\n}\n/**\r\n * This check only verifies that the environment is running knative.\r\n * This must be run *after* checking for Kubernetes, otherwise it will\r\n * return a false positive.\r\n */\n\n\nfunction isCloudRun() {\n  return !!process.env.K_CONFIGURATION;\n}\n\nasync function isKubernetesEngine() {\n  try {\n    await gcpMetadata.instance('attributes/cluster-name');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nasync function isComputeEngine() {\n  return gcpMetadata.isAvailable();\n}","map":{"version":3,"sources":["C:/Users/Enrique Niebles/Documents/Misi√≥n TIC 2021/Ciclo 3 - Desarrollo Software/Despliegue/grupo4/react/node_modules/google-auth-library/build/src/auth/envDetect.js"],"names":["Object","defineProperty","exports","value","getEnv","clear","GCPEnv","gcpMetadata","require","envPromise","undefined","getEnvMemoized","env","NONE","isAppEngine","APP_ENGINE","isCloudFunction","CLOUD_FUNCTIONS","isComputeEngine","isKubernetesEngine","KUBERNETES_ENGINE","isCloudRun","CLOUD_RUN","COMPUTE_ENGINE","process","GAE_SERVICE","GAE_MODULE_NAME","FUNCTION_NAME","FUNCTION_TARGET","K_CONFIGURATION","instance","e","isAvailable"],"mappings":"AAAA,a,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,MAAR,GAAiBF,OAAO,CAACG,KAAR,GAAgBH,OAAO,CAACI,MAAR,GAAiB,KAAK,CAAvD;;AACA,MAAMC,WAAW,GAAGC,OAAO,CAAC,cAAD,CAA3B;;AACA,IAAIF,MAAJ;;AACA,CAAC,UAAUA,MAAV,EAAkB;AACfA,EAAAA,MAAM,CAAC,YAAD,CAAN,GAAuB,YAAvB;AACAA,EAAAA,MAAM,CAAC,mBAAD,CAAN,GAA8B,mBAA9B;AACAA,EAAAA,MAAM,CAAC,iBAAD,CAAN,GAA4B,iBAA5B;AACAA,EAAAA,MAAM,CAAC,gBAAD,CAAN,GAA2B,gBAA3B;AACAA,EAAAA,MAAM,CAAC,WAAD,CAAN,GAAsB,WAAtB;AACAA,EAAAA,MAAM,CAAC,MAAD,CAAN,GAAiB,MAAjB;AACH,CAPD,EAOGA,MAAM,GAAGJ,OAAO,CAACI,MAAR,KAAmBJ,OAAO,CAACI,MAAR,GAAiB,EAApC,CAPZ;;AAQA,IAAIG,UAAJ;;AACA,SAASJ,KAAT,GAAiB;AACbI,EAAAA,UAAU,GAAGC,SAAb;AACH;;AACDR,OAAO,CAACG,KAAR,GAAgBA,KAAhB;;AACA,eAAeD,MAAf,GAAwB;AACpB,MAAIK,UAAJ,EAAgB;AACZ,WAAOA,UAAP;AACH;;AACDA,EAAAA,UAAU,GAAGE,cAAc,EAA3B;AACA,SAAOF,UAAP;AACH;;AACDP,OAAO,CAACE,MAAR,GAAiBA,MAAjB;;AACA,eAAeO,cAAf,GAAgC;AAC5B,MAAIC,GAAG,GAAGN,MAAM,CAACO,IAAjB;;AACA,MAAIC,WAAW,EAAf,EAAmB;AACfF,IAAAA,GAAG,GAAGN,MAAM,CAACS,UAAb;AACH,GAFD,MAGK,IAAIC,eAAe,EAAnB,EAAuB;AACxBJ,IAAAA,GAAG,GAAGN,MAAM,CAACW,eAAb;AACH,GAFI,MAGA,IAAI,MAAMC,eAAe,EAAzB,EAA6B;AAC9B,QAAI,MAAMC,kBAAkB,EAA5B,EAAgC;AAC5BP,MAAAA,GAAG,GAAGN,MAAM,CAACc,iBAAb;AACH,KAFD,MAGK,IAAIC,UAAU,EAAd,EAAkB;AACnBT,MAAAA,GAAG,GAAGN,MAAM,CAACgB,SAAb;AACH,KAFI,MAGA;AACDV,MAAAA,GAAG,GAAGN,MAAM,CAACiB,cAAb;AACH;AACJ,GAVI,MAWA;AACDX,IAAAA,GAAG,GAAGN,MAAM,CAACO,IAAb;AACH;;AACD,SAAOD,GAAP;AACH;;AACD,SAASE,WAAT,GAAuB;AACnB,SAAO,CAAC,EAAEU,OAAO,CAACZ,GAAR,CAAYa,WAAZ,IAA2BD,OAAO,CAACZ,GAAR,CAAYc,eAAzC,CAAR;AACH;;AACD,SAASV,eAAT,GAA2B;AACvB,SAAO,CAAC,EAAEQ,OAAO,CAACZ,GAAR,CAAYe,aAAZ,IAA6BH,OAAO,CAACZ,GAAR,CAAYgB,eAA3C,CAAR;AACH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAASP,UAAT,GAAsB;AAClB,SAAO,CAAC,CAACG,OAAO,CAACZ,GAAR,CAAYiB,eAArB;AACH;;AACD,eAAeV,kBAAf,GAAoC;AAChC,MAAI;AACA,UAAMZ,WAAW,CAACuB,QAAZ,CAAqB,yBAArB,CAAN;AACA,WAAO,IAAP;AACH,GAHD,CAIA,OAAOC,CAAP,EAAU;AACN,WAAO,KAAP;AACH;AACJ;;AACD,eAAeb,eAAf,GAAiC;AAC7B,SAAOX,WAAW,CAACyB,WAAZ,EAAP;AACH","sourcesContent":["\"use strict\";\r\n// Copyright 2018 Google LLC\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//      http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.getEnv = exports.clear = exports.GCPEnv = void 0;\r\nconst gcpMetadata = require(\"gcp-metadata\");\r\nvar GCPEnv;\r\n(function (GCPEnv) {\r\n    GCPEnv[\"APP_ENGINE\"] = \"APP_ENGINE\";\r\n    GCPEnv[\"KUBERNETES_ENGINE\"] = \"KUBERNETES_ENGINE\";\r\n    GCPEnv[\"CLOUD_FUNCTIONS\"] = \"CLOUD_FUNCTIONS\";\r\n    GCPEnv[\"COMPUTE_ENGINE\"] = \"COMPUTE_ENGINE\";\r\n    GCPEnv[\"CLOUD_RUN\"] = \"CLOUD_RUN\";\r\n    GCPEnv[\"NONE\"] = \"NONE\";\r\n})(GCPEnv = exports.GCPEnv || (exports.GCPEnv = {}));\r\nlet envPromise;\r\nfunction clear() {\r\n    envPromise = undefined;\r\n}\r\nexports.clear = clear;\r\nasync function getEnv() {\r\n    if (envPromise) {\r\n        return envPromise;\r\n    }\r\n    envPromise = getEnvMemoized();\r\n    return envPromise;\r\n}\r\nexports.getEnv = getEnv;\r\nasync function getEnvMemoized() {\r\n    let env = GCPEnv.NONE;\r\n    if (isAppEngine()) {\r\n        env = GCPEnv.APP_ENGINE;\r\n    }\r\n    else if (isCloudFunction()) {\r\n        env = GCPEnv.CLOUD_FUNCTIONS;\r\n    }\r\n    else if (await isComputeEngine()) {\r\n        if (await isKubernetesEngine()) {\r\n            env = GCPEnv.KUBERNETES_ENGINE;\r\n        }\r\n        else if (isCloudRun()) {\r\n            env = GCPEnv.CLOUD_RUN;\r\n        }\r\n        else {\r\n            env = GCPEnv.COMPUTE_ENGINE;\r\n        }\r\n    }\r\n    else {\r\n        env = GCPEnv.NONE;\r\n    }\r\n    return env;\r\n}\r\nfunction isAppEngine() {\r\n    return !!(process.env.GAE_SERVICE || process.env.GAE_MODULE_NAME);\r\n}\r\nfunction isCloudFunction() {\r\n    return !!(process.env.FUNCTION_NAME || process.env.FUNCTION_TARGET);\r\n}\r\n/**\r\n * This check only verifies that the environment is running knative.\r\n * This must be run *after* checking for Kubernetes, otherwise it will\r\n * return a false positive.\r\n */\r\nfunction isCloudRun() {\r\n    return !!process.env.K_CONFIGURATION;\r\n}\r\nasync function isKubernetesEngine() {\r\n    try {\r\n        await gcpMetadata.instance('attributes/cluster-name');\r\n        return true;\r\n    }\r\n    catch (e) {\r\n        return false;\r\n    }\r\n}\r\nasync function isComputeEngine() {\r\n    return gcpMetadata.isAvailable();\r\n}\r\n//# sourceMappingURL=envDetect.js.map"]},"metadata":{},"sourceType":"script"}