{"ast":null,"code":"\"use strict\"; // Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar _regeneratorRuntime = require(\"C:/Users/Enrique Niebles/Documents/Misi\\xF3n TIC 2021/Ciclo 3 - Desarrollo Software/Heroku/client/react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:/Users/Enrique Niebles/Documents/Misi\\xF3n TIC 2021/Ciclo 3 - Desarrollo Software/Heroku/client/react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"C:/Users/Enrique Niebles/Documents/Misi\\xF3n TIC 2021/Ciclo 3 - Desarrollo Software/Heroku/client/react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/Enrique Niebles/Documents/Misi\\xF3n TIC 2021/Ciclo 3 - Desarrollo Software/Heroku/client/react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"C:/Users/Enrique Niebles/Documents/Misi\\xF3n TIC 2021/Ciclo 3 - Desarrollo Software/Heroku/client/react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:/Users/Enrique Niebles/Documents/Misi\\xF3n TIC 2021/Ciclo 3 - Desarrollo Software/Heroku/client/react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StsCredentials = void 0;\n\nvar querystring = require(\"querystring\");\n\nvar transporters_1 = require(\"../transporters\");\n\nvar oauth2common_1 = require(\"./oauth2common\");\n/**\r\n * Implements the OAuth 2.0 token exchange based on\r\n * https://tools.ietf.org/html/rfc8693\r\n */\n\n\nvar StsCredentials = /*#__PURE__*/function (_oauth2common_1$OAuth) {\n  _inherits(StsCredentials, _oauth2common_1$OAuth);\n\n  var _super = _createSuper(StsCredentials);\n\n  /**\r\n   * Initializes an STS credentials instance.\r\n   * @param tokenExchangeEndpoint The token exchange endpoint.\r\n   * @param clientAuthentication The client authentication credentials if\r\n   *   available.\r\n   */\n  function StsCredentials(tokenExchangeEndpoint, clientAuthentication) {\n    var _this;\n\n    _classCallCheck(this, StsCredentials);\n\n    _this = _super.call(this, clientAuthentication);\n    _this.tokenExchangeEndpoint = tokenExchangeEndpoint;\n    _this.transporter = new transporters_1.DefaultTransporter();\n    return _this;\n  }\n  /**\r\n   * Exchanges the provided token for another type of token based on the\r\n   * rfc8693 spec.\r\n   * @param stsCredentialsOptions The token exchange options used to populate\r\n   *   the token exchange request.\r\n   * @param additionalHeaders Optional additional headers to pass along the\r\n   *   request.\r\n   * @param options Optional additional GCP-specific non-spec defined options\r\n   *   to send with the request.\r\n   *   Example: `&options=${encodeUriComponent(JSON.stringified(options))}`\r\n   * @return A promise that resolves with the token exchange response containing\r\n   *   the requested token and its expiration time.\r\n   */\n\n\n  _createClass(StsCredentials, [{\n    key: \"exchangeToken\",\n    value: function () {\n      var _exchangeToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(stsCredentialsOptions, additionalHeaders, // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      options) {\n        var _a, _b, _c, values, headers, opts, response, stsSuccessfulResponse;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                values = {\n                  grant_type: stsCredentialsOptions.grantType,\n                  resource: stsCredentialsOptions.resource,\n                  audience: stsCredentialsOptions.audience,\n                  scope: (_a = stsCredentialsOptions.scope) === null || _a === void 0 ? void 0 : _a.join(' '),\n                  requested_token_type: stsCredentialsOptions.requestedTokenType,\n                  subject_token: stsCredentialsOptions.subjectToken,\n                  subject_token_type: stsCredentialsOptions.subjectTokenType,\n                  actor_token: (_b = stsCredentialsOptions.actingParty) === null || _b === void 0 ? void 0 : _b.actorToken,\n                  actor_token_type: (_c = stsCredentialsOptions.actingParty) === null || _c === void 0 ? void 0 : _c.actorTokenType,\n                  // Non-standard GCP-specific options.\n                  options: options && JSON.stringify(options)\n                }; // Remove undefined fields.\n\n                Object.keys(values).forEach(function (key) {\n                  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                  if (typeof values[key] === 'undefined') {\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    delete values[key];\n                  }\n                });\n                headers = {\n                  'Content-Type': 'application/x-www-form-urlencoded'\n                }; // Inject additional STS headers if available.\n\n                Object.assign(headers, additionalHeaders || {});\n                opts = {\n                  url: this.tokenExchangeEndpoint,\n                  method: 'POST',\n                  headers: headers,\n                  data: querystring.stringify(values),\n                  responseType: 'json'\n                }; // Apply OAuth client authentication.\n\n                this.applyClientAuthenticationOptions(opts);\n                _context.prev = 6;\n                _context.next = 9;\n                return this.transporter.request(opts);\n\n              case 9:\n                response = _context.sent;\n                // Successful response.\n                stsSuccessfulResponse = response.data;\n                stsSuccessfulResponse.res = response;\n                return _context.abrupt(\"return\", stsSuccessfulResponse);\n\n              case 15:\n                _context.prev = 15;\n                _context.t0 = _context[\"catch\"](6);\n\n                if (!_context.t0.response) {\n                  _context.next = 19;\n                  break;\n                }\n\n                throw oauth2common_1.getErrorFromOAuthErrorResponse(_context.t0.response.data, // Preserve other fields from the original error.\n                _context.t0);\n\n              case 19:\n                throw _context.t0;\n\n              case 20:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[6, 15]]);\n      }));\n\n      function exchangeToken(_x, _x2, _x3) {\n        return _exchangeToken.apply(this, arguments);\n      }\n\n      return exchangeToken;\n    }()\n  }]);\n\n  return StsCredentials;\n}(oauth2common_1.OAuthClientAuthHandler);\n\nexports.StsCredentials = StsCredentials;","map":{"version":3,"sources":["C:/Users/Enrique Niebles/Documents/Misi√≥n TIC 2021/Ciclo 3 - Desarrollo Software/Heroku/client/react/node_modules/google-auth-library/build/src/auth/stscredentials.js"],"names":["Object","defineProperty","exports","value","StsCredentials","querystring","require","transporters_1","oauth2common_1","tokenExchangeEndpoint","clientAuthentication","transporter","DefaultTransporter","stsCredentialsOptions","additionalHeaders","options","values","grant_type","grantType","resource","audience","scope","_a","join","requested_token_type","requestedTokenType","subject_token","subjectToken","subject_token_type","subjectTokenType","actor_token","_b","actingParty","actorToken","actor_token_type","_c","actorTokenType","JSON","stringify","keys","forEach","key","headers","assign","opts","url","method","data","responseType","applyClientAuthenticationOptions","request","response","stsSuccessfulResponse","res","getErrorFromOAuthErrorResponse","OAuthClientAuthHandler"],"mappings":"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","sourcesContent":["\"use strict\";\r\n// Copyright 2021 Google LLC\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//      http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.StsCredentials = void 0;\r\nconst querystring = require(\"querystring\");\r\nconst transporters_1 = require(\"../transporters\");\r\nconst oauth2common_1 = require(\"./oauth2common\");\r\n/**\r\n * Implements the OAuth 2.0 token exchange based on\r\n * https://tools.ietf.org/html/rfc8693\r\n */\r\nclass StsCredentials extends oauth2common_1.OAuthClientAuthHandler {\r\n    /**\r\n     * Initializes an STS credentials instance.\r\n     * @param tokenExchangeEndpoint The token exchange endpoint.\r\n     * @param clientAuthentication The client authentication credentials if\r\n     *   available.\r\n     */\r\n    constructor(tokenExchangeEndpoint, clientAuthentication) {\r\n        super(clientAuthentication);\r\n        this.tokenExchangeEndpoint = tokenExchangeEndpoint;\r\n        this.transporter = new transporters_1.DefaultTransporter();\r\n    }\r\n    /**\r\n     * Exchanges the provided token for another type of token based on the\r\n     * rfc8693 spec.\r\n     * @param stsCredentialsOptions The token exchange options used to populate\r\n     *   the token exchange request.\r\n     * @param additionalHeaders Optional additional headers to pass along the\r\n     *   request.\r\n     * @param options Optional additional GCP-specific non-spec defined options\r\n     *   to send with the request.\r\n     *   Example: `&options=${encodeUriComponent(JSON.stringified(options))}`\r\n     * @return A promise that resolves with the token exchange response containing\r\n     *   the requested token and its expiration time.\r\n     */\r\n    async exchangeToken(stsCredentialsOptions, additionalHeaders, \r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    options) {\r\n        var _a, _b, _c;\r\n        const values = {\r\n            grant_type: stsCredentialsOptions.grantType,\r\n            resource: stsCredentialsOptions.resource,\r\n            audience: stsCredentialsOptions.audience,\r\n            scope: (_a = stsCredentialsOptions.scope) === null || _a === void 0 ? void 0 : _a.join(' '),\r\n            requested_token_type: stsCredentialsOptions.requestedTokenType,\r\n            subject_token: stsCredentialsOptions.subjectToken,\r\n            subject_token_type: stsCredentialsOptions.subjectTokenType,\r\n            actor_token: (_b = stsCredentialsOptions.actingParty) === null || _b === void 0 ? void 0 : _b.actorToken,\r\n            actor_token_type: (_c = stsCredentialsOptions.actingParty) === null || _c === void 0 ? void 0 : _c.actorTokenType,\r\n            // Non-standard GCP-specific options.\r\n            options: options && JSON.stringify(options),\r\n        };\r\n        // Remove undefined fields.\r\n        Object.keys(values).forEach(key => {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            if (typeof values[key] === 'undefined') {\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                delete values[key];\r\n            }\r\n        });\r\n        const headers = {\r\n            'Content-Type': 'application/x-www-form-urlencoded',\r\n        };\r\n        // Inject additional STS headers if available.\r\n        Object.assign(headers, additionalHeaders || {});\r\n        const opts = {\r\n            url: this.tokenExchangeEndpoint,\r\n            method: 'POST',\r\n            headers,\r\n            data: querystring.stringify(values),\r\n            responseType: 'json',\r\n        };\r\n        // Apply OAuth client authentication.\r\n        this.applyClientAuthenticationOptions(opts);\r\n        try {\r\n            const response = await this.transporter.request(opts);\r\n            // Successful response.\r\n            const stsSuccessfulResponse = response.data;\r\n            stsSuccessfulResponse.res = response;\r\n            return stsSuccessfulResponse;\r\n        }\r\n        catch (error) {\r\n            // Translate error to OAuthError.\r\n            if (error.response) {\r\n                throw oauth2common_1.getErrorFromOAuthErrorResponse(error.response.data, \r\n                // Preserve other fields from the original error.\r\n                error);\r\n            }\r\n            // Request could fail before the server responds.\r\n            throw error;\r\n        }\r\n    }\r\n}\r\nexports.StsCredentials = StsCredentials;\r\n//# sourceMappingURL=stscredentials.js.map"]},"metadata":{},"sourceType":"script"}