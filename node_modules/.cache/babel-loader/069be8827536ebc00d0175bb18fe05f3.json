{"ast":null,"code":"\"use strict\"; // Copyright 2013 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.JWT = void 0;\n\nconst gtoken_1 = require(\"gtoken\");\n\nconst jwtaccess_1 = require(\"./jwtaccess\");\n\nconst oauth2client_1 = require(\"./oauth2client\");\n\nclass JWT extends oauth2client_1.OAuth2Client {\n  constructor(optionsOrEmail, keyFile, key, scopes, subject, keyId) {\n    const opts = optionsOrEmail && typeof optionsOrEmail === 'object' ? optionsOrEmail : {\n      email: optionsOrEmail,\n      keyFile,\n      key,\n      keyId,\n      scopes,\n      subject\n    };\n    super({\n      eagerRefreshThresholdMillis: opts.eagerRefreshThresholdMillis,\n      forceRefreshOnFailure: opts.forceRefreshOnFailure\n    });\n    this.email = opts.email;\n    this.keyFile = opts.keyFile;\n    this.key = opts.key;\n    this.keyId = opts.keyId;\n    this.scopes = opts.scopes;\n    this.subject = opts.subject;\n    this.additionalClaims = opts.additionalClaims;\n    this.credentials = {\n      refresh_token: 'jwt-placeholder',\n      expiry_date: 1\n    };\n  }\n  /**\r\n   * Creates a copy of the credential with the specified scopes.\r\n   * @param scopes List of requested scopes or a single scope.\r\n   * @return The cloned instance.\r\n   */\n\n\n  createScoped(scopes) {\n    return new JWT({\n      email: this.email,\n      keyFile: this.keyFile,\n      key: this.key,\n      keyId: this.keyId,\n      scopes,\n      subject: this.subject,\n      additionalClaims: this.additionalClaims\n    });\n  }\n  /**\r\n   * Obtains the metadata to be sent with the request.\r\n   *\r\n   * @param url the URI being authorized.\r\n   */\n\n\n  async getRequestMetadataAsync(url) {\n    url = this.defaultServicePath ? `https://${this.defaultServicePath}/` : url;\n    const useSelfSignedJWT = !this.hasUserScopes() && url || this.useJWTAccessWithScope && this.hasAnyScopes();\n\n    if (!this.apiKey && useSelfSignedJWT) {\n      if (this.additionalClaims && this.additionalClaims.target_audience) {\n        const {\n          tokens\n        } = await this.refreshToken();\n        return {\n          headers: this.addSharedMetadataHeaders({\n            Authorization: `Bearer ${tokens.id_token}`\n          })\n        };\n      } else {\n        // no scopes have been set, but a uri has been provided. Use JWTAccess\n        // credentials.\n        if (!this.access) {\n          this.access = new jwtaccess_1.JWTAccess(this.email, this.key, this.keyId, this.eagerRefreshThresholdMillis);\n        }\n\n        let scopes;\n\n        if (this.hasUserScopes()) {\n          scopes = this.scopes;\n        } else if (!url) {\n          scopes = this.defaultScopes;\n        }\n\n        const headers = await this.access.getRequestHeaders(url !== null && url !== void 0 ? url : undefined, this.additionalClaims, // Scopes take precedent over audience for signing,\n        // so we only provide them if useJWTAccessWithScope is on\n        this.useJWTAccessWithScope ? scopes : undefined);\n        return {\n          headers: this.addSharedMetadataHeaders(headers)\n        };\n      }\n    } else if (this.hasAnyScopes() || this.apiKey) {\n      return super.getRequestMetadataAsync(url);\n    } else {\n      // If no audience, apiKey, or scopes are provided, we should not attempt\n      // to populate any headers:\n      return {\n        headers: {}\n      };\n    }\n  }\n  /**\r\n   * Fetches an ID token.\r\n   * @param targetAudience the audience for the fetched ID token.\r\n   */\n\n\n  async fetchIdToken(targetAudience) {\n    // Create a new gToken for fetching an ID token\n    const gtoken = new gtoken_1.GoogleToken({\n      iss: this.email,\n      sub: this.subject,\n      scope: this.scopes || this.defaultScopes,\n      keyFile: this.keyFile,\n      key: this.key,\n      additionalClaims: {\n        target_audience: targetAudience\n      }\n    });\n    await gtoken.getToken({\n      forceRefresh: true\n    });\n\n    if (!gtoken.idToken) {\n      throw new Error('Unknown error: Failed to fetch ID token');\n    }\n\n    return gtoken.idToken;\n  }\n  /**\r\n   * Determine if there are currently scopes available.\r\n   */\n\n\n  hasUserScopes() {\n    if (!this.scopes) {\n      return false;\n    }\n\n    return this.scopes.length > 0;\n  }\n  /**\r\n   * Are there any default or user scopes defined.\r\n   */\n\n\n  hasAnyScopes() {\n    if (this.scopes && this.scopes.length > 0) return true;\n    if (this.defaultScopes && this.defaultScopes.length > 0) return true;\n    return false;\n  }\n\n  authorize(callback) {\n    if (callback) {\n      this.authorizeAsync().then(r => callback(null, r), callback);\n    } else {\n      return this.authorizeAsync();\n    }\n  }\n\n  async authorizeAsync() {\n    const result = await this.refreshToken();\n\n    if (!result) {\n      throw new Error('No result returned');\n    }\n\n    this.credentials = result.tokens;\n    this.credentials.refresh_token = 'jwt-placeholder';\n    this.key = this.gtoken.key;\n    this.email = this.gtoken.iss;\n    return result.tokens;\n  }\n  /**\r\n   * Refreshes the access token.\r\n   * @param refreshToken ignored\r\n   * @private\r\n   */\n\n\n  async refreshTokenNoCache( // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  refreshToken) {\n    const gtoken = this.createGToken();\n    const token = await gtoken.getToken({\n      forceRefresh: this.isTokenExpiring()\n    });\n    const tokens = {\n      access_token: token.access_token,\n      token_type: 'Bearer',\n      expiry_date: gtoken.expiresAt,\n      id_token: gtoken.idToken\n    };\n    this.emit('tokens', tokens);\n    return {\n      res: null,\n      tokens\n    };\n  }\n  /**\r\n   * Create a gToken if it doesn't already exist.\r\n   */\n\n\n  createGToken() {\n    if (!this.gtoken) {\n      this.gtoken = new gtoken_1.GoogleToken({\n        iss: this.email,\n        sub: this.subject,\n        scope: this.scopes || this.defaultScopes,\n        keyFile: this.keyFile,\n        key: this.key,\n        additionalClaims: this.additionalClaims\n      });\n    }\n\n    return this.gtoken;\n  }\n  /**\r\n   * Create a JWT credentials instance using the given input options.\r\n   * @param json The input object.\r\n   */\n\n\n  fromJSON(json) {\n    if (!json) {\n      throw new Error('Must pass in a JSON object containing the service account auth settings.');\n    }\n\n    if (!json.client_email) {\n      throw new Error('The incoming JSON object does not contain a client_email field');\n    }\n\n    if (!json.private_key) {\n      throw new Error('The incoming JSON object does not contain a private_key field');\n    } // Extract the relevant information from the json key file.\n\n\n    this.email = json.client_email;\n    this.key = json.private_key;\n    this.keyId = json.private_key_id;\n    this.projectId = json.project_id;\n    this.quotaProjectId = json.quota_project_id;\n  }\n\n  fromStream(inputStream, callback) {\n    if (callback) {\n      this.fromStreamAsync(inputStream).then(() => callback(), callback);\n    } else {\n      return this.fromStreamAsync(inputStream);\n    }\n  }\n\n  fromStreamAsync(inputStream) {\n    return new Promise((resolve, reject) => {\n      if (!inputStream) {\n        throw new Error('Must pass in a stream containing the service account auth settings.');\n      }\n\n      let s = '';\n      inputStream.setEncoding('utf8').on('error', reject).on('data', chunk => s += chunk).on('end', () => {\n        try {\n          const data = JSON.parse(s);\n          this.fromJSON(data);\n          resolve();\n        } catch (e) {\n          reject(e);\n        }\n      });\n    });\n  }\n  /**\r\n   * Creates a JWT credentials instance using an API Key for authentication.\r\n   * @param apiKey The API Key in string form.\r\n   */\n\n\n  fromAPIKey(apiKey) {\n    if (typeof apiKey !== 'string') {\n      throw new Error('Must provide an API Key string.');\n    }\n\n    this.apiKey = apiKey;\n  }\n  /**\r\n   * Using the key or keyFile on the JWT client, obtain an object that contains\r\n   * the key and the client email.\r\n   */\n\n\n  async getCredentials() {\n    if (this.key) {\n      return {\n        private_key: this.key,\n        client_email: this.email\n      };\n    } else if (this.keyFile) {\n      const gtoken = this.createGToken();\n      const creds = await gtoken.getCredentials(this.keyFile);\n      return {\n        private_key: creds.privateKey,\n        client_email: creds.clientEmail\n      };\n    }\n\n    throw new Error('A key or a keyFile must be provided to getCredentials.');\n  }\n\n}\n\nexports.JWT = JWT;","map":{"version":3,"sources":["C:/Users/Enrique Niebles/Documents/Misi√≥n TIC 2021/Ciclo 3 - Desarrollo Software/Despliegue/grupo4/react/node_modules/google-auth-library/build/src/auth/jwtclient.js"],"names":["Object","defineProperty","exports","value","JWT","gtoken_1","require","jwtaccess_1","oauth2client_1","OAuth2Client","constructor","optionsOrEmail","keyFile","key","scopes","subject","keyId","opts","email","eagerRefreshThresholdMillis","forceRefreshOnFailure","additionalClaims","credentials","refresh_token","expiry_date","createScoped","getRequestMetadataAsync","url","defaultServicePath","useSelfSignedJWT","hasUserScopes","useJWTAccessWithScope","hasAnyScopes","apiKey","target_audience","tokens","refreshToken","headers","addSharedMetadataHeaders","Authorization","id_token","access","JWTAccess","defaultScopes","getRequestHeaders","undefined","fetchIdToken","targetAudience","gtoken","GoogleToken","iss","sub","scope","getToken","forceRefresh","idToken","Error","length","authorize","callback","authorizeAsync","then","r","result","refreshTokenNoCache","createGToken","token","isTokenExpiring","access_token","token_type","expiresAt","emit","res","fromJSON","json","client_email","private_key","private_key_id","projectId","project_id","quotaProjectId","quota_project_id","fromStream","inputStream","fromStreamAsync","Promise","resolve","reject","s","setEncoding","on","chunk","data","JSON","parse","e","fromAPIKey","getCredentials","creds","privateKey","clientEmail"],"mappings":"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","sourcesContent":["\"use strict\";\r\n// Copyright 2013 Google LLC\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//      http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.JWT = void 0;\r\nconst gtoken_1 = require(\"gtoken\");\r\nconst jwtaccess_1 = require(\"./jwtaccess\");\r\nconst oauth2client_1 = require(\"./oauth2client\");\r\nclass JWT extends oauth2client_1.OAuth2Client {\r\n    constructor(optionsOrEmail, keyFile, key, scopes, subject, keyId) {\r\n        const opts = optionsOrEmail && typeof optionsOrEmail === 'object'\r\n            ? optionsOrEmail\r\n            : { email: optionsOrEmail, keyFile, key, keyId, scopes, subject };\r\n        super({\r\n            eagerRefreshThresholdMillis: opts.eagerRefreshThresholdMillis,\r\n            forceRefreshOnFailure: opts.forceRefreshOnFailure,\r\n        });\r\n        this.email = opts.email;\r\n        this.keyFile = opts.keyFile;\r\n        this.key = opts.key;\r\n        this.keyId = opts.keyId;\r\n        this.scopes = opts.scopes;\r\n        this.subject = opts.subject;\r\n        this.additionalClaims = opts.additionalClaims;\r\n        this.credentials = { refresh_token: 'jwt-placeholder', expiry_date: 1 };\r\n    }\r\n    /**\r\n     * Creates a copy of the credential with the specified scopes.\r\n     * @param scopes List of requested scopes or a single scope.\r\n     * @return The cloned instance.\r\n     */\r\n    createScoped(scopes) {\r\n        return new JWT({\r\n            email: this.email,\r\n            keyFile: this.keyFile,\r\n            key: this.key,\r\n            keyId: this.keyId,\r\n            scopes,\r\n            subject: this.subject,\r\n            additionalClaims: this.additionalClaims,\r\n        });\r\n    }\r\n    /**\r\n     * Obtains the metadata to be sent with the request.\r\n     *\r\n     * @param url the URI being authorized.\r\n     */\r\n    async getRequestMetadataAsync(url) {\r\n        url = this.defaultServicePath ? `https://${this.defaultServicePath}/` : url;\r\n        const useSelfSignedJWT = (!this.hasUserScopes() && url) ||\r\n            (this.useJWTAccessWithScope && this.hasAnyScopes());\r\n        if (!this.apiKey && useSelfSignedJWT) {\r\n            if (this.additionalClaims &&\r\n                this.additionalClaims.target_audience) {\r\n                const { tokens } = await this.refreshToken();\r\n                return {\r\n                    headers: this.addSharedMetadataHeaders({\r\n                        Authorization: `Bearer ${tokens.id_token}`,\r\n                    }),\r\n                };\r\n            }\r\n            else {\r\n                // no scopes have been set, but a uri has been provided. Use JWTAccess\r\n                // credentials.\r\n                if (!this.access) {\r\n                    this.access = new jwtaccess_1.JWTAccess(this.email, this.key, this.keyId, this.eagerRefreshThresholdMillis);\r\n                }\r\n                let scopes;\r\n                if (this.hasUserScopes()) {\r\n                    scopes = this.scopes;\r\n                }\r\n                else if (!url) {\r\n                    scopes = this.defaultScopes;\r\n                }\r\n                const headers = await this.access.getRequestHeaders(url !== null && url !== void 0 ? url : undefined, this.additionalClaims, \r\n                // Scopes take precedent over audience for signing,\r\n                // so we only provide them if useJWTAccessWithScope is on\r\n                this.useJWTAccessWithScope ? scopes : undefined);\r\n                return { headers: this.addSharedMetadataHeaders(headers) };\r\n            }\r\n        }\r\n        else if (this.hasAnyScopes() || this.apiKey) {\r\n            return super.getRequestMetadataAsync(url);\r\n        }\r\n        else {\r\n            // If no audience, apiKey, or scopes are provided, we should not attempt\r\n            // to populate any headers:\r\n            return { headers: {} };\r\n        }\r\n    }\r\n    /**\r\n     * Fetches an ID token.\r\n     * @param targetAudience the audience for the fetched ID token.\r\n     */\r\n    async fetchIdToken(targetAudience) {\r\n        // Create a new gToken for fetching an ID token\r\n        const gtoken = new gtoken_1.GoogleToken({\r\n            iss: this.email,\r\n            sub: this.subject,\r\n            scope: this.scopes || this.defaultScopes,\r\n            keyFile: this.keyFile,\r\n            key: this.key,\r\n            additionalClaims: { target_audience: targetAudience },\r\n        });\r\n        await gtoken.getToken({\r\n            forceRefresh: true,\r\n        });\r\n        if (!gtoken.idToken) {\r\n            throw new Error('Unknown error: Failed to fetch ID token');\r\n        }\r\n        return gtoken.idToken;\r\n    }\r\n    /**\r\n     * Determine if there are currently scopes available.\r\n     */\r\n    hasUserScopes() {\r\n        if (!this.scopes) {\r\n            return false;\r\n        }\r\n        return this.scopes.length > 0;\r\n    }\r\n    /**\r\n     * Are there any default or user scopes defined.\r\n     */\r\n    hasAnyScopes() {\r\n        if (this.scopes && this.scopes.length > 0)\r\n            return true;\r\n        if (this.defaultScopes && this.defaultScopes.length > 0)\r\n            return true;\r\n        return false;\r\n    }\r\n    authorize(callback) {\r\n        if (callback) {\r\n            this.authorizeAsync().then(r => callback(null, r), callback);\r\n        }\r\n        else {\r\n            return this.authorizeAsync();\r\n        }\r\n    }\r\n    async authorizeAsync() {\r\n        const result = await this.refreshToken();\r\n        if (!result) {\r\n            throw new Error('No result returned');\r\n        }\r\n        this.credentials = result.tokens;\r\n        this.credentials.refresh_token = 'jwt-placeholder';\r\n        this.key = this.gtoken.key;\r\n        this.email = this.gtoken.iss;\r\n        return result.tokens;\r\n    }\r\n    /**\r\n     * Refreshes the access token.\r\n     * @param refreshToken ignored\r\n     * @private\r\n     */\r\n    async refreshTokenNoCache(\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    refreshToken) {\r\n        const gtoken = this.createGToken();\r\n        const token = await gtoken.getToken({\r\n            forceRefresh: this.isTokenExpiring(),\r\n        });\r\n        const tokens = {\r\n            access_token: token.access_token,\r\n            token_type: 'Bearer',\r\n            expiry_date: gtoken.expiresAt,\r\n            id_token: gtoken.idToken,\r\n        };\r\n        this.emit('tokens', tokens);\r\n        return { res: null, tokens };\r\n    }\r\n    /**\r\n     * Create a gToken if it doesn't already exist.\r\n     */\r\n    createGToken() {\r\n        if (!this.gtoken) {\r\n            this.gtoken = new gtoken_1.GoogleToken({\r\n                iss: this.email,\r\n                sub: this.subject,\r\n                scope: this.scopes || this.defaultScopes,\r\n                keyFile: this.keyFile,\r\n                key: this.key,\r\n                additionalClaims: this.additionalClaims,\r\n            });\r\n        }\r\n        return this.gtoken;\r\n    }\r\n    /**\r\n     * Create a JWT credentials instance using the given input options.\r\n     * @param json The input object.\r\n     */\r\n    fromJSON(json) {\r\n        if (!json) {\r\n            throw new Error('Must pass in a JSON object containing the service account auth settings.');\r\n        }\r\n        if (!json.client_email) {\r\n            throw new Error('The incoming JSON object does not contain a client_email field');\r\n        }\r\n        if (!json.private_key) {\r\n            throw new Error('The incoming JSON object does not contain a private_key field');\r\n        }\r\n        // Extract the relevant information from the json key file.\r\n        this.email = json.client_email;\r\n        this.key = json.private_key;\r\n        this.keyId = json.private_key_id;\r\n        this.projectId = json.project_id;\r\n        this.quotaProjectId = json.quota_project_id;\r\n    }\r\n    fromStream(inputStream, callback) {\r\n        if (callback) {\r\n            this.fromStreamAsync(inputStream).then(() => callback(), callback);\r\n        }\r\n        else {\r\n            return this.fromStreamAsync(inputStream);\r\n        }\r\n    }\r\n    fromStreamAsync(inputStream) {\r\n        return new Promise((resolve, reject) => {\r\n            if (!inputStream) {\r\n                throw new Error('Must pass in a stream containing the service account auth settings.');\r\n            }\r\n            let s = '';\r\n            inputStream\r\n                .setEncoding('utf8')\r\n                .on('error', reject)\r\n                .on('data', chunk => (s += chunk))\r\n                .on('end', () => {\r\n                try {\r\n                    const data = JSON.parse(s);\r\n                    this.fromJSON(data);\r\n                    resolve();\r\n                }\r\n                catch (e) {\r\n                    reject(e);\r\n                }\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Creates a JWT credentials instance using an API Key for authentication.\r\n     * @param apiKey The API Key in string form.\r\n     */\r\n    fromAPIKey(apiKey) {\r\n        if (typeof apiKey !== 'string') {\r\n            throw new Error('Must provide an API Key string.');\r\n        }\r\n        this.apiKey = apiKey;\r\n    }\r\n    /**\r\n     * Using the key or keyFile on the JWT client, obtain an object that contains\r\n     * the key and the client email.\r\n     */\r\n    async getCredentials() {\r\n        if (this.key) {\r\n            return { private_key: this.key, client_email: this.email };\r\n        }\r\n        else if (this.keyFile) {\r\n            const gtoken = this.createGToken();\r\n            const creds = await gtoken.getCredentials(this.keyFile);\r\n            return { private_key: creds.privateKey, client_email: creds.clientEmail };\r\n        }\r\n        throw new Error('A key or a keyFile must be provided to getCredentials.');\r\n    }\r\n}\r\nexports.JWT = JWT;\r\n//# sourceMappingURL=jwtclient.js.map"]},"metadata":{},"sourceType":"script"}